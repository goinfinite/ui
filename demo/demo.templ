package main

import (
	uiDisplay "github.com/goinfinite/ui/src/display"
	uiForm "github.com/goinfinite/ui/src/form"
	uiImport "github.com/goinfinite/ui/src/import"
)

templ DemoIndex() {
	<!DOCTYPE html>
	<html class="dark">
		<head>
			<title>Infinite UI Demo</title>
			<meta charset="utf-8"/>
			<script type="text/javascript">
window.__unocss = {
  theme: {
    colors: {
      secondary: {
        50: "#dea893",
        100: "#d89a81",
        200: "#d38b6f",
        300: "#cd7d5d",
        400: "#ca7654",
        500: "#c97350",
        600: "#c46f4d",
        700: "#ba6949",
        800: "#a55e41",
        900: "#905239",
        950: "#7c4631",
      },
    },
  },
};
</script>
			@uiImport.HeadTagsFull()
		</head>
		<body class="bg-neutral-900 text-neutral-50">
			<h1 class="my-10 text-center text-5xl font-bold">Infinite UI Demo</h1>
			<section class="container mx-auto flex flex-col overflow-x-auto p-4">
				<div class="flex flex-col gap-10">
					<!-- uiForm -->
					<div class="flex flex-col gap-2">
						<h2 class="text-3xl font-bold">
							{ `@uiForm` }
						</h2>
						<p class="text-sm text-neutral-400">
							uiForm is a collection of components that make it easy to create forms.
						</p>
					</div>
					<div class="*:border-t *:border-neutral-800 *:pt-10 flex flex-col gap-10">
						@InputFieldDemo()
						@TextAreaDemo()
						@RadioInputDemo()
						@InlineRadioGroupDemo()
						@SelectInputDemo()
					</div>
				</div>
				<!-- uiDisplay -->
				<div class="mt-20 flex flex-col gap-10">
					<div class="flex flex-col gap-2">
						<h2 class="text-3xl font-bold">
							{ `@uiDisplay` }
						</h2>
						<p class="text-sm text-neutral-400">
							uiDisplay is a collection of components for displaying content.
						</p>
					</div>
					<div class="*:border-t *:border-neutral-800 *:pt-10 flex flex-col gap-10">
						@AccordionDemo()
						@TagDemo()
					</div>
				</div>
			</section>
		</body>
	</html>
}

templ UsageTitle(componentPath string) {
	<a
		href={ "https://github.com/goinfinite/ui/blob/main/src" + templ.SafeURL(componentPath) }
		rel="help"
		target="_blank"
		title="View Complete Component Settings"
	>
		<h4 class="text-lg font-bold text-neutral-50 transition-all hover:opacity-80">
			Usage
			<i class="ph-bold ph-arrow-square-out text-sm text-neutral-400"></i>
		</h4>
	</a>
}

templ InputFieldDemo() {
	<div class="flex flex-col gap-4">
		<div class="flex flex-col gap-2">
			<h3 class="text-xl font-bold">.InputField</h3>
			<p class="text-sm text-neutral-400">
				An input field is a basic form element that allows users to enter text.
			</p>
		</div>
		<div class="grid gap-10 md:grid-cols-2">
			<div class="flex flex-col gap-4">
				<div class="flex flex-col gap-2">
					@UsageTitle("/form/inputField.templ")
					<pre class="rounded-md bg-neutral-800 p-4 text-xs">
						<code>
							{ `@uiForm.InputField(uiForm.InputFieldSettings{
	InputType: uiForm.InputTypeText,
	InputName: "name",
	Label:     "Name",

	// OptionalFields
	TwoWayStatePath: "name",
})` }
						</code>
					</pre>
				</div>
				<div class="flex flex-col gap-2">
					<h5 class="text-sm font-bold">Alpine.js Parent State <i>(x-data)</i></h5>
					<pre class="rounded-md bg-neutral-800 p-4 text-xs">
						<code>{ `<div x-data="{name: ''}"></div>` }</code>
					</pre>
				</div>
			</div>
			<div x-data="{name: ''}" class="flex flex-col">
				<h4 class="mb-2 text-lg font-bold">Live Example</h4>
				@uiForm.InputField(uiForm.InputFieldSettings{
					InputType:       uiForm.InputTypeText,
					InputName:       "name",
					Label:           "Name",
					TwoWayStatePath: "name",
				})
				<div class="mt-4 flex flex-col gap-1">
					<p class="text-sm text-neutral-400">Value & IsReadOnly: true</p>
					@uiForm.InputField(uiForm.InputFieldSettings{
						InputType:  uiForm.InputTypeText,
						InputName:  "name",
						Label:      "Name",
						Value:      "Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
						IsReadOnly: true,
					})
				</div>
				<div class="mt-4 flex flex-col gap-1">
					<p class="text-sm text-neutral-400">AffixLeftValue & AffixRightValue</p>
					@uiForm.InputField(uiForm.InputFieldSettings{
						InputType:       uiForm.InputTypeText,
						InputName:       "name",
						Label:           "Name",
						TwoWayStatePath: "name",
						AffixLeftValue:  "goinfinite.dev/",
					})
					@uiForm.InputField(uiForm.InputFieldSettings{
						InputType:       uiForm.InputTypeText,
						InputName:       "name",
						Label:           "Name",
						TwoWayStatePath: "name",
						AffixRightValue: ".jpg",
					})
				</div>
				<div class="mt-4 flex flex-col gap-1">
					<p class="text-sm text-neutral-400">HintValue & HintDisplay (Description & Tooltip)</p>
					@uiForm.InputField(uiForm.InputFieldSettings{
						InputType:       uiForm.InputTypeText,
						InputName:       "name",
						Label:           "Name",
						TwoWayStatePath: "name",
						HintValue:       "This is a helpful hit displayed as a description below the input.",
						HintDisplay:     uiForm.InputTypeHintDisplayDescription,
					})
					@uiForm.InputField(uiForm.InputFieldSettings{
						InputType:       uiForm.InputTypeText,
						InputName:       "name",
						Label:           "Name",
						TwoWayStatePath: "name",
						HintValue:       "This is a helpful hint displayed as a tooltip.",
						HintDisplay:     uiForm.InputTypeHintDisplayTooltip,
					})
				</div>
			</div>
		</div>
	</div>
}

templ TextAreaDemo() {
	<div class="flex flex-col gap-4">
		<div class="flex flex-col gap-2">
			<h3 class="text-xl font-bold">.TextArea</h3>
			<p class="text-sm text-neutral-400">
				A textarea is a form element that allows users to enter multiple lines of text.
			</p>
		</div>
		<div class="grid gap-10 md:grid-cols-2">
			<div class="flex flex-col gap-4">
				<div class="flex flex-col gap-2">
					@UsageTitle("/form/textArea.templ")
					<pre class="rounded-md bg-neutral-800 p-4 text-xs">
						<code>
							{ `@uiForm.TextArea(uiForm.TextAreaSettings{
	InputName: "description",
	Label:     "Description",

	// OptionalFields
	TwoWayStatePath: "description",
	IsRequired:      false,
	IsReadOnly:      false,
})` }
						</code>
					</pre>
				</div>
				<div class="flex flex-col gap-2">
					<h5 class="text-sm font-bold">Alpine.js Parent State <i>(x-data)</i></h5>
					<pre class="rounded-md bg-neutral-800 p-4 text-xs">
						<code>{ `<div x-data="{description: ''}"></div>` }</code>
					</pre>
				</div>
			</div>
			<div x-data="{description: ''}" class="flex flex-col gap-4">
				<h4 class="text-lg font-bold">Live Example</h4>
				@uiForm.TextArea(uiForm.TextAreaSettings{
					InputName:       "description",
					Label:           "Description",
					TwoWayStatePath: "description",
				})
				<div class="mt-4 flex flex-col gap-2">
					<p class="text-sm text-neutral-400">IsReadOnly: true</p>
					@uiForm.TextArea(uiForm.TextAreaSettings{
						InputName:  "description",
						Label:      "Description",
						Value:      "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
						IsReadOnly: true,
					})
				</div>
			</div>
		</div>
	</div>
}

templ RadioInputDemo() {
	<div class="flex flex-col gap-4">
		<div class="flex flex-col gap-2">
			<h3 class="text-xl font-bold">.RadioInput</h3>
			<p class="text-sm text-neutral-400">
				A radio input allows users to select one option from a set of options.
			</p>
		</div>
		<div class="grid gap-10 md:grid-cols-2">
			<div class="flex flex-col gap-4">
				<div class="flex flex-col gap-2">
					@UsageTitle("/form/radioInput.templ")
					<pre class="rounded-md bg-neutral-800 p-4 text-xs">
						<code>
							{ `@uiForm.RadioInput(uiForm.RadioInputSettings{
	Label:           "Option 1",
	StateValue:      "option1",
	TwoWayStatePath: "selectedOption",
})
@uiForm.RadioInput(uiForm.RadioInputSettings{
	Label:           "Option 2",
	StateValue:      "option2",
	TwoWayStatePath: "selectedOption",
})` }
						</code>
					</pre>
				</div>
				<div class="flex flex-col gap-2">
					<h5 class="text-sm font-bold">Alpine.js Parent State <i>(x-data)</i></h5>
					<pre class="rounded-md bg-neutral-800 p-4 text-xs">
						<code>{ `<div x-data="{selectedOption: 'option2'}"></div>` }</code>
					</pre>
				</div>
			</div>
			<div x-data="{selectedOption: 'option2'}" class="flex flex-col gap-4">
				<h4 class="text-lg font-bold">Live Example</h4>
				<div class="flex flex-col gap-2">
					@uiForm.RadioInput(uiForm.RadioInputSettings{
						Label:           "Option 1",
						StateValue:      "option1",
						TwoWayStatePath: "selectedOption",
						InputName:       "options",
					})
					@uiForm.RadioInput(uiForm.RadioInputSettings{
						Label:           "Option 2",
						StateValue:      "option2",
						TwoWayStatePath: "selectedOption",
						InputName:       "options",
					})
				</div>
			</div>
		</div>
	</div>
}

templ InlineRadioGroupDemo() {
	<div class="flex flex-col gap-4">
		<div class="flex flex-col gap-2">
			<h3 class="text-xl font-bold">.InlineRadioGroup</h3>
			<p class="text-sm text-neutral-400">
				An inline radio group displays a set of radio options in a horizontal layout.
			</p>
		</div>
		<div class="grid gap-10 md:grid-cols-2">
			<div class="flex flex-col gap-4">
				<div class="flex flex-col gap-2">
					@UsageTitle("/form/inlineRadioGroup.templ")
					<pre class="rounded-md bg-neutral-800 p-4 text-xs">
						<code>
							{ `@uiForm.InlineRadioGroup(uiForm.InlineRadioGroupSettings{
	Label: "Select an option",
	InputSettings: []uiForm.RadioInputSettings{
		{
			Label:           "Option 1",
			StateValue:      "option1",
			TwoWayStatePath: "groupSelection",
		},
		{
			Label:           "Option 2",
			StateValue:      "option2",
			TwoWayStatePath: "groupSelection",
		},
	},

	// OptionalFields
	TwoWayStatePath: "groupSelection",
	InputName:       "group1",
})` }
						</code>
					</pre>
				</div>
				<div class="flex flex-col gap-2">
					<h5 class="text-sm font-bold">Alpine.js Parent State <i>(x-data)</i></h5>
					<pre class="rounded-md bg-neutral-800 p-4 text-xs">
						<code>{ `<div x-data="{groupSelection: 'option2'}"></div>` }</code>
					</pre>
				</div>
			</div>
			<div x-data="{groupSelection: 'option2'}" class="flex flex-col">
				<h4 class="mb-2 text-lg font-bold">Live Example</h4>
				@uiForm.InlineRadioGroup(uiForm.InlineRadioGroupSettings{
					Label: "Select an option",
					InputSettings: []uiForm.RadioInputSettings{
						{
							Label:           "Option 1",
							StateValue:      "option1",
							TwoWayStatePath: "groupSelection",
						},
						{
							Label:           "Option 2",
							StateValue:      "option2",
							TwoWayStatePath: "groupSelection",
						},
					},
					TwoWayStatePath: "groupSelection",
					InputName:       "group1",
				})
			</div>
		</div>
	</div>
}

templ SelectInputDemoOption1() {
	<div class="flex flex-col">
		<h4 class="text-md font-bold">🇦🇷 Argentina</h4>
		<p class="text-sm text-neutral-400">Known for its dance and wine.</p>
	</div>
}

templ SelectInputDemoOption2() {
	<div class="flex flex-col">
		<h4 class="text-md font-bold">🇧🇷 Brazil</h4>
		<p class="text-sm text-neutral-400">Known for its music and natural beauty.</p>
	</div>
}

templ SelectInputDemoOption3() {
	<div class="flex flex-col">
		<h4 class="text-md font-bold">🇨🇱 Chile</h4>
		<p class="text-sm text-neutral-400">Known for its deserts and mysterious islands.</p>
	</div>
}

templ SelectInputDemo() {
	<div class="flex flex-col gap-4">
		<div class="flex flex-col gap-2">
			<h3 class="text-xl font-bold">.SelectInput</h3>
			<p class="text-sm text-neutral-400">
				A select input allows users to select one option from a dropdown list.
			</p>
		</div>
		<div class="grid gap-10 md:grid-cols-2" x-data="{country: 'Brazil'}">
			<div class="flex flex-col gap-4">
				<div class="flex flex-col gap-2">
					<h4 class="text-lg font-bold">
						Usage <span class="text-sm text-neutral-500">(w/FlatOptions)</span>
					</h4>
					<pre class="rounded-md bg-neutral-800 p-4 text-xs">
						<code>
							{ `@uiForm.SelectInput(uiForm.SelectInputSettings{
	InputName: "country",
	Label:     "Country",

	// OptionalFields
	FlatOptions: []string{"Argentina", "Brazil", "Chile"},
	TwoWayStatePath:          "country",
	ShouldIncludeBlankOption: true,
})` }
						</code>
					</pre>
				</div>
				<div class="flex flex-col gap-2">
					<h5 class="text-sm font-bold">Alpine.js Parent State <i>(x-data)</i></h5>
					<pre class="rounded-md bg-neutral-800 p-4 text-xs">
						<code>{ `<div x-data="{country: '` }<span x-text="country"></span>{ `'}"></div>` }</code>
					</pre>
				</div>
			</div>
			<div class="flex flex-col">
				<h4 class="mb-2 text-lg font-bold">Live Example</h4>
				@uiForm.SelectInput(uiForm.SelectInputSettings{
					InputName:                "country",
					Label:                    "Country",
					FlatOptions:              []string{"Argentina", "Brazil", "Chile"},
					TwoWayStatePath:          "country",
					ShouldIncludeBlankOption: true,
				})
			</div>
		</div>
		<div class="my-10 grid gap-10 md:grid-cols-2" x-data="{country: 'BR'}">
			<div class="flex flex-col gap-4">
				<div class="flex flex-col gap-2">
					<h4 class="text-lg font-bold">
						Usage <span class="text-sm text-neutral-500">(w/LabelValueOptions)</span>
					</h4>
					<pre class="rounded-md bg-neutral-800 p-4 text-xs">
						<code>
							{ `@uiForm.SelectInput(uiForm.SelectInputSettings{
	InputName: "country",
	Label:     "Country",

	// OptionalFields
	LabelValueOptions: []uiForm.SelectLabelValueOption{
		{
			Label: "Argentina",
			Value: "AR",
		},
		{
			Label: "Brazil",
			Value: "BR",
		},
		{
			Label: "Chile",
			Value: "CL",
		},
	},
	TwoWayStatePath:          "country",
	ShouldIncludeBlankOption: true,
})` }
						</code>
					</pre>
				</div>
				<div class="flex flex-col gap-2">
					<h5 class="text-sm font-bold">Alpine.js Parent State <i>(x-data)</i></h5>
					<pre class="rounded-md bg-neutral-800 p-4 text-xs">
						<code>{ `<div x-data="{country: '` }<span x-text="country"></span>{ `'}"></div>` }</code>
					</pre>
				</div>
			</div>
			<div class="flex flex-col">
				<h4 class="mb-2 text-lg font-bold">Live Example</h4>
				@uiForm.SelectInput(uiForm.SelectInputSettings{
					InputName: "country",
					Label:     "Country",
					LabelValueOptions: []uiForm.SelectLabelValueOption{
						{
							Label: "Argentina",
							Value: "AR",
						},
						{
							Label: "Brazil",
							Value: "BR",
						},
						{
							Label: "Chile",
							Value: "CL",
						},
					},
					TwoWayStatePath:          "country",
					ShouldIncludeBlankOption: true,
				})
			</div>
		</div>
		<div class="grid gap-10 md:grid-cols-2" x-data="{country: 'BR'}">
			<div class="flex flex-col gap-4">
				<div class="flex flex-col gap-2">
					<h4 class="text-lg font-bold">
						Usage <span class="text-sm text-neutral-500">(w/LabelValueOptions and LabelHtml)</span>
					</h4>
					<pre class="rounded-md bg-neutral-800 p-4 text-xs">
						<code>
							{ `@uiForm.SelectInput(uiForm.SelectInputSettings{
	InputName: "country",
	Label:     "Country",

	// OptionalFields
	LabelValueOptions: []uiForm.SelectLabelValueOption{
		{
			Label:     "Argentina",
			LabelHtml: SelectInputDemoOption1(),
			Value:     "AR",
		},
		{
			Label:     "Brazil",
			LabelHtml: SelectInputDemoOption2(),
			Value:     "BR",
		},
		{
			Label:     "Chile",
			LabelHtml: SelectInputDemoOption3(),
			Value:     "CL",
		},
	},
	TwoWayStatePath:          "country",
	ShouldIncludeBlankOption: true,
})` }
						</code>
					</pre>
				</div>
				<div class="flex flex-col gap-2">
					<h5 class="text-sm font-bold">Alpine.js Parent State <i>(x-data)</i></h5>
					<pre class="rounded-md bg-neutral-800 p-4 text-xs">
						<code>{ `<div x-data="{country: '` }<span x-text="country"></span>{ `'}"></div>` }</code>
					</pre>
				</div>
			</div>
			<div class="flex flex-col gap-3">
				<h4 class="text-lg font-bold">Live Example</h4>
				<p class="text-sm text-neutral-400">Click the dropdown to see the HTML labels.</p>
				@uiForm.SelectInput(uiForm.SelectInputSettings{
					InputName: "country",
					Label:     "Country",
					LabelValueOptions: []uiForm.SelectLabelValueOption{
						{
							Label:     "Argentina",
							LabelHtml: SelectInputDemoOption1(),
							Value:     "AR",
						},
						{
							Label:     "Brazil",
							LabelHtml: SelectInputDemoOption2(),
							Value:     "BR",
						},
						{
							Label:     "Chile",
							LabelHtml: SelectInputDemoOption3(),
							Value:     "CL",
						},
					},
					TwoWayStatePath:          "country",
					ShouldIncludeBlankOption: true,
				})
			</div>
		</div>
	</div>
}

templ AccordionDemoSection1() {
	<p class="text-sm text-neutral-400">This is the content for section 1. You can put any content here.</p>
}

templ AccordionDemoSection2() {
	<p class="text-sm text-neutral-400">This is the content for section 2. You can put any content here.</p>
}

templ AccordionDemoSection3() {
	<p class="text-sm text-neutral-400">This is the content for section 3. You can put any content here.</p>
}

templ AccordionDemo() {
	<div class="flex flex-col gap-4">
		<div class="flex flex-col gap-2">
			<h3 class="text-xl font-bold">.Accordion</h3>
			<p class="text-sm text-neutral-400">
				An accordion is a vertically stacked list of items that can be expanded or collapsed to reveal content.
			</p>
		</div>
		<div class="grid gap-10 md:grid-cols-2">
			<div class="flex flex-col gap-4">
				<div class="flex flex-col gap-2">
					@UsageTitle("/display/accordion.templ")
					<pre class="rounded-md bg-neutral-800 p-4 text-xs">
						<code>
							{ `@uiDisplay.Accordion(uiDisplay.AccordionSettings{
	Items: []uiDisplay.AccordionItemSettings{
		{
			Title: "Section 1",
			Content: AccordionDemoSection1(),
			Icon: "ph-info",
		},
		{
			Title: "Section 2",
			Content: AccordionDemoSection2(),
		},
		{
			Title: "Section 3",
			Content: AccordionDemoSection3(),
		},
	},
})` }
						</code>
					</pre>
				</div>
			</div>
			<div class="flex flex-col">
				<h4 class="mb-2 text-lg font-bold">Live Example</h4>
				@uiDisplay.Accordion(uiDisplay.AccordionSettings{
					Items: []uiDisplay.AccordionItemSettings{
						{
							Title:   "Section 1",
							Content: AccordionDemoSection1(),
							Icon:    "ph-info",
						},
						{
							Title:   "Section 2",
							Content: AccordionDemoSection2(),
							Icon:    "ph-warning",
						},
						{
							Title:   "Section 3",
							Content: AccordionDemoSection3(),
							Icon:    "ph-check",
						},
					},
				})
			</div>
		</div>
	</div>
}

templ TagDemo() {
	<div class="flex flex-col gap-4">
		<div class="flex flex-row flex-wrap items-center gap-x-20 gap-y-10">
			<div class="flex flex-col gap-2">
				<h3 class="text-xl font-bold">.Tag</h3>
				<p class="text-sm text-neutral-400">
					A tag is a small label that can be used to categorize or identify content.
				</p>
			</div>
			<div class="flex flex-col gap-2">
				@UsageTitle("/display/tag.templ")
				<pre class="rounded-md bg-neutral-800 p-4 text-xs">
					<code>
						{ `@uiDisplay.Tag(uiDisplay.TagSettings{
	OuterLeftIcon: "ph-info",
	OuterLeftLabel: "Info",
	OuterRadius: uiDisplay.TagRadiusMd,
	InnerIcon: "ph-warning",
	InnerLabel: "Warning",
	Size: uiDisplay.TagSizeXs,
})` }
					</code>
				</pre>
			</div>
		</div>
		<div class="flex flex-col gap-4">
			<h4 class="mb-2 text-lg font-bold">Live Example</h4>
			<div class="flex flex-row flex-wrap items-center gap-10">
				<div class="flex flex-col gap-2">
					<p class="text-sm text-neutral-400">TagSizeXs to TagSizeXl</p>
					for _, tagSize := range []string{"xs", "sm", "md", "lg", "xl"} {
						@uiDisplay.Tag(uiDisplay.TagSettings{
							OuterLeftIcon:  "ph-info",
							OuterLeftLabel: "Info",
							InnerIcon:      "ph-warning",
							InnerLabel:     "Warning",
							Size:           tagSize,
						})
					}
				</div>
				<div class="flex flex-col gap-2">
					<p class="text-sm text-neutral-400">
						TagRadiusNone to TagRadiusFull
						<br/>
						<small>(OuterRadius & InnerRadius)</small>
					</p>
					for _, tagRadius := range []string{"none", "xs", "sm", "md", "lg", "xl", "full"} {
						@uiDisplay.Tag(uiDisplay.TagSettings{
							OuterLeftIcon:  "ph-info",
							OuterLeftLabel: "Info",
							OuterRadius:    tagRadius,
							InnerIcon:      "ph-warning",
							InnerLabel:     "Warning",
							InnerRadius:    tagRadius,
						})
					}
				</div>
				<div class="flex flex-col gap-2">
					<p class="text-sm text-neutral-400">
						OuterRingColor
						<br/>
						<small>(w/ OuterBackgroundColor "transparent")</small>
					</p>
					for _, tagRingColor := range []string{"red-500", "amber-500", "emerald-500", "cyan-500", "violet-500", "gray-500"} {
						@uiDisplay.Tag(uiDisplay.TagSettings{
							OuterLeftIcon:        "ph-info",
							OuterLeftLabel:       "Info",
							OuterRingColor:       tagRingColor,
							OuterBackgroundColor: "transparent",
							OuterTextColor:       "neutral-50",
							InnerIcon:            "ph-warning",
							InnerLabel:           "Warning",
						})
					}
				</div>
				<div class="flex flex-col gap-2">
					<p class="text-sm text-neutral-400">
						OuterBackgroundColor
						<br/>
						<small>(w/o OuterRingColor)</small>
					</p>
					for _, tagBackgroundColor := range []string{"red-500", "amber-500", "emerald-500", "cyan-500", "violet-500", "gray-500"} {
						@uiDisplay.Tag(uiDisplay.TagSettings{
							OuterLeftIcon:        "ph-info",
							OuterLeftLabel:       "Info",
							OuterBackgroundColor: tagBackgroundColor,
							OuterTextColor:       "neutral-50",
							InnerIcon:            "ph-warning",
							InnerLabel:           "Warning",
						})
					}
				</div>
				<div class="flex flex-col gap-2">
					<p class="text-sm text-neutral-400">InnerBackgroundColor</p>
					for _, innerColor := range []string{"red-500", "amber-500", "emerald-500", "cyan-500", "violet-500", "gray-500"} {
						@uiDisplay.Tag(uiDisplay.TagSettings{
							OuterLeftIcon:        "ph-info",
							OuterLeftLabel:       "Info",
							InnerIcon:            "ph-warning",
							InnerLabel:           "Warning",
							InnerBackgroundColor: innerColor,
						})
					}
				</div>
				<div x-data="{clickCount: 0}" class="flex flex-col gap-2">
					<p class="text-sm text-neutral-400">Side Elements OnClickFunc</p>
					<div class="flex flex-col gap-2">
						@uiDisplay.Tag(uiDisplay.TagSettings{
							OuterLeftIcon:             "ph-plus",
							OuterLeftLabel:            "Add",
							OuterLeftOnClickFunc:      "clickCount++",
							OuterRightIcon:            "ph-minus",
							OuterRightLabel:           "Remove",
							OuterRightOnClickFunc:     "if(clickCount > 0) clickCount--",
							InnerIcon:                 "ph-hash",
							InnerLabelOneWayStatePath: "clickCount",
						})
					</div>
				</div>
			</div>
		</div>
	</div>
}
