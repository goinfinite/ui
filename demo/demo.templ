package main

import (
	uiControl "github.com/goinfinite/ui/src/control"
	uiDisplay "github.com/goinfinite/ui/src/display"
	uiForm "github.com/goinfinite/ui/src/form"
	uiImport "github.com/goinfinite/ui/src/import"
)

templ DemoIndex() {
	<!DOCTYPE html>
	<html class="dark">
		<head>
			<title>Infinite UI Demo</title>
			<meta charset="utf-8"/>
			<script type="text/javascript">window.__unocss={theme:{colors:{primary:{50:'#edfcff',100:'#d7f6ff',200:'#b8f0ff',300:'#86eaff',400:'#4edbff',500:'#25c2ff',600:'#0da6ff',700:'#0993f8',800:'#0d6fc0',900:'#115e97',950:'#10395b'},secondary:{50:"#dea893",100:"#d89a81",200:"#d38b6f",300:"#cd7d5d",400:"#ca7654",500:"#c97350",600:"#c46f4d",700:"#ba6949",800:"#a55e41",900:"#905239",950:"#7c4631"}}}};</script>
			@uiImport.HeadTagsFull()
		</head>
		<body class="bg-neutral-900 text-neutral-50">
			<div class="container mx-auto my-10 flex flex-col items-center justify-between gap-4">
				<h1 class="text-center text-5xl font-bold">Infinite UI Demo</h1>
				<p class="text-center text-sm text-neutral-400">
					<i><a href="https://goinfinite.net" target="_blank" title="goinfinite.net">Infinite</a></i> UI is a collection of reusable components for building elegant user interfaces in Go.
					<br/>
					It is built with <i>a-h/templ</i>, <i>Alpine.js</i>, <i>Tailwind CSS</i>, <i>Phosphor Icons</i> and the occasional additional JavaScript libraries when necessary.
				</p>
				<div class="flex flex-row items-center gap-2">
					<a href="https://github.com/goinfinite/ui" target="_blank" title="GitHub Repository">
						<img src="https://img.shields.io/badge/repository-262626?logo=github" alt="GitHub Repository"/>
					</a>
					<a href="https://github.com/orgs/goinfinite/discussions" target="_blank" title="GitHub Discussions">
						<img src="https://img.shields.io/badge/discussions-751A3D?logo=github" alt="GitHub Discussions"/>
					</a>
					<a href="https://www.reddit.com/r/goinfinite/" target="_blank" title="Reddit Subreddit">
						<img src="https://img.shields.io/badge/%2Fr%2Fgoinfinite-FF4500?logo=reddit&logoColor=ffffff" alt="Reddit Subreddit"/>
					</a>
					<a href="https://goreportcard.com/report/github.com/goinfinite/ui" target="_blank" title="Go Report Card">
						<img src="https://goreportcard.com/badge/github.com/goinfinite/ui" alt="Go Report Card"/>
					</a>
					<a href="https://github.com/goinfinite/ui/blob/main/LICENSE.md" target="_blank" title="License">
						<img src="https://img.shields.io/badge/license-MIT-teal.svg" alt="License"/>
					</a>
				</div>
			</div>
			<section class="gap-30 container mx-auto flex flex-col overflow-x-auto overflow-y-hidden p-4">
				<div class="flex flex-col gap-10">
					<!-- uiForm -->
					<div class="flex flex-col gap-2">
						<h2 class="text-3xl font-bold">
							{ `@uiForm` }
						</h2>
						<p class="text-sm text-neutral-400">
							uiForm is a collection of components that make it easy to create forms.
						</p>
					</div>
					<div class="*:border-t *:border-neutral-800 *:pt-10 flex flex-col gap-10">
						@InputFieldDemo()
						@TextAreaDemo()
						@RadioInputDemo()
						@InlineRadioGroupDemo()
						@SelectInputDemo()
					</div>
				</div>
				<!-- uiDisplay -->
				<div class="flex flex-col gap-10">
					<div class="flex flex-col gap-2">
						<h2 class="text-3xl font-bold">
							{ `@uiDisplay` }
						</h2>
						<p class="text-sm text-neutral-400">
							uiDisplay is a collection of components for displaying content.
						</p>
					</div>
					<div class="*:border-t *:border-neutral-800 *:pt-10 flex flex-col gap-10">
						@AlertDemo()
						@AccordionDemo()
						@LoadingOverlayDemo()
						@ModalDemo()
						@CloakLoadingDemo()
						@SidebarDemo()
						@TagDemo()
						@ToastDemo()
					</div>
				</div>
				<!-- uiControl -->
				<div class="flex flex-col gap-10">
					<div class="flex flex-col gap-2">
						<h2 class="text-3xl font-bold">
							{ `@uiControl` }
						</h2>
						<p class="text-sm text-neutral-400">
							uiControl is a collection of components for controlling content.
						</p>
					</div>
					<div class="*:border-t *:border-neutral-800 *:pt-10 flex flex-col gap-10">
						@ButtonDemo()
						@RangeSliderDemo()
					</div>
				</div>
			</section>
			@uiDisplay.CloakLoading(uiDisplay.CloakLoadingSettings{BackgroundColor: "rgb(38, 38, 38)"})
		</body>
	</html>
}

const DemoPreCodeClasses string = "rounded-md bg-neutral-800 p-4 text-xs text-wrap tab-2"

templ UsageTitle(componentPath string) {
	<a
		href={ "https://github.com/goinfinite/ui/blob/main/src" + templ.SafeURL(componentPath) }
		rel="help"
		target="_blank"
		title="View Complete Component Settings"
	>
		<h4 class="text-lg font-bold text-neutral-50 transition-all hover:opacity-80">
			Usage
			<i class="ph-bold ph-arrow-square-out text-sm text-neutral-400"></i>
		</h4>
	</a>
}

templ InputFieldDemo() {
	<div class="flex flex-col gap-4">
		<div class="flex flex-row flex-wrap items-center gap-x-20 gap-y-10">
			<div class="flex flex-col gap-2">
				<h3 class="text-xl font-bold">.InputField</h3>
				<p class="text-sm text-neutral-400">
					An input field is a basic form element that allows users to enter text.
				</p>
			</div>
			<div class="flex flex-col gap-2">
				@UsageTitle("/form/inputField.templ")
				<pre class={ DemoPreCodeClasses }>
					<code>
						{ `@uiForm.InputField(uiForm.InputFieldSettings{
	InputType: uiForm.InputTypeText,
	InputName: "name",
	Label:     "Name",

	// OptionalFields
	TwoWayStatePath: "name",
})` }
					</code>
				</pre>
			</div>
			<div class="flex flex-col gap-2">
				<h5 class="text-sm font-bold">Alpine.js Parent State <i>(x-data)</i></h5>
				<pre class={ DemoPreCodeClasses }>
					<code>{ `<div x-data="{name: ''}"></div>` }</code>
				</pre>
			</div>
		</div>
		<div class="flex flex-col gap-4" x-data="{name: ''}">
			<h4 class="mb-2 text-lg font-bold">Live Example</h4>
			<div class="lg:*:max-w-50 flex flex-row flex-wrap items-start justify-between gap-10">
				<div class="flex flex-col gap-2">
					<p class="text-sm text-neutral-400">Basic Input</p>
					@uiForm.InputField(uiForm.InputFieldSettings{
						InputType:       uiForm.InputTypeText,
						InputName:       "name",
						Label:           "Name",
						TwoWayStatePath: "name",
					})
				</div>
				<div class="flex flex-col gap-2">
					<p class="text-sm text-neutral-400">Value & IsReadOnly</p>
					@uiForm.InputField(uiForm.InputFieldSettings{
						InputType:  uiForm.InputTypeText,
						InputName:  "name",
						Label:      "Name",
						Value:      "Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
						IsReadOnly: true,
					})
				</div>
				<div class="flex flex-col gap-2">
					<p class="text-sm text-neutral-400">InputTypeNumberMin, Max & Step</p>
					@uiForm.InputField(uiForm.InputFieldSettings{
						InputType:       uiForm.InputTypeNumber,
						InputName:       "name",
						Label:           "Name",
						TwoWayStatePath: "name",
						InputNumberMin:  "0",
						InputNumberMax:  "100",
						InputNumberStep: ".1",
					})
				</div>
				<div class="flex flex-col gap-2">
					<p class="text-sm text-neutral-400">AffixLeftValue & AffixRightValue</p>
					@uiForm.InputField(uiForm.InputFieldSettings{
						InputType:       uiForm.InputTypeText,
						InputName:       "name",
						Label:           "Name",
						TwoWayStatePath: "name",
						AffixLeftValue:  "goinfinite.dev/",
					})
					@uiForm.InputField(uiForm.InputFieldSettings{
						InputType:       uiForm.InputTypeText,
						InputName:       "name",
						Label:           "Name",
						TwoWayStatePath: "name",
						AffixRightValue: ".jpg",
					})
				</div>
				<div class="flex flex-col gap-2">
					<p class="text-sm text-neutral-400">HintValue & HintDisplay</p>
					@uiForm.InputField(uiForm.InputFieldSettings{
						InputType:       uiForm.InputTypeText,
						InputName:       "name",
						Label:           "Name",
						TwoWayStatePath: "name",
						HintValue:       "This is a helpful hint displayed as a description below the input.",
						HintDisplay:     uiForm.InputTypeHintDisplayDescription,
					})
					@uiForm.InputField(uiForm.InputFieldSettings{
						InputType:       uiForm.InputTypeText,
						InputName:       "name",
						Label:           "Name",
						TwoWayStatePath: "name",
						HintValue:       "This is a helpful hint displayed as a tooltip.",
						HintDisplay:     uiForm.InputTypeHintDisplayTooltip,
					})
				</div>
			</div>
		</div>
	</div>
}

templ TextAreaDemo() {
	<div class="flex flex-col gap-4">
		<div class="flex flex-col gap-2">
			<h3 class="text-xl font-bold">.TextArea</h3>
			<p class="text-sm text-neutral-400">
				A textarea is a form element that allows users to enter multiple lines of text.
			</p>
		</div>
		<div class="grid gap-10 md:grid-cols-2">
			<div class="flex flex-col gap-4">
				<div class="flex flex-col gap-2">
					@UsageTitle("/form/textArea.templ")
					<pre class={ DemoPreCodeClasses }>
						<code>
							{ `@uiForm.TextArea(uiForm.TextAreaSettings{
	InputName: "description",
	Label:     "Description",

	// OptionalFields
	TwoWayStatePath: "description",
	IsRequired:      false,
	IsReadOnly:      false,
})` }
						</code>
					</pre>
				</div>
				<div class="flex flex-col gap-2">
					<h5 class="text-sm font-bold">Alpine.js Parent State <i>(x-data)</i></h5>
					<pre class={ DemoPreCodeClasses }>
						<code>{ `<div x-data="{description: ''}"></div>` }</code>
					</pre>
				</div>
			</div>
			<div x-data="{description: ''}" class="flex flex-col gap-4">
				<h4 class="text-lg font-bold">Live Example</h4>
				@uiForm.TextArea(uiForm.TextAreaSettings{
					InputName:       "description",
					Label:           "Description",
					TwoWayStatePath: "description",
				})
				<div class="mt-4 flex flex-col gap-2">
					<p class="text-sm text-neutral-400">Value & IsReadOnly</p>
					@uiForm.TextArea(uiForm.TextAreaSettings{
						InputName:  "description",
						Label:      "Description",
						Value:      "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
						IsReadOnly: true,
					})
				</div>
			</div>
		</div>
	</div>
}

templ RadioInputDemo() {
	<div class="flex flex-col gap-4">
		<div class="flex flex-col gap-2">
			<h3 class="text-xl font-bold">.RadioInput</h3>
			<p class="text-sm text-neutral-400">
				A radio input allows users to select one option from a set of options.
			</p>
		</div>
		<div class="grid gap-10 md:grid-cols-2">
			<div class="flex flex-col gap-4">
				<div class="flex flex-col gap-2">
					@UsageTitle("/form/radioInput.templ")
					<pre class={ DemoPreCodeClasses }>
						<code>
							{ `@uiForm.RadioInput(uiForm.RadioInputSettings{
	Label:           "Option 1",
	StateValue:      "option1",
	TwoWayStatePath: "selectedOption",
})
@uiForm.RadioInput(uiForm.RadioInputSettings{
	Label:           "Option 2",
	StateValue:      "option2",
	TwoWayStatePath: "selectedOption",
})` }
						</code>
					</pre>
				</div>
				<div class="flex flex-col gap-2">
					<h5 class="text-sm font-bold">Alpine.js Parent State <i>(x-data)</i></h5>
					<pre class={ DemoPreCodeClasses }>
						<code>{ `<div x-data="{selectedOption: 'option2'}"></div>` }</code>
					</pre>
				</div>
			</div>
			<div x-data="{selectedOption: 'option2'}" class="flex flex-col gap-4">
				<h4 class="text-lg font-bold">Live Example</h4>
				<div class="flex flex-col gap-2">
					@uiForm.RadioInput(uiForm.RadioInputSettings{
						Label:           "Option 1",
						StateValue:      "option1",
						TwoWayStatePath: "selectedOption",
						InputName:       "options",
					})
					@uiForm.RadioInput(uiForm.RadioInputSettings{
						Label:           "Option 2",
						StateValue:      "option2",
						TwoWayStatePath: "selectedOption",
						InputName:       "options",
					})
				</div>
			</div>
		</div>
	</div>
}

templ InlineRadioGroupDemo() {
	<div class="flex flex-col gap-4">
		<div class="flex flex-col gap-2">
			<h3 class="text-xl font-bold">.InlineRadioGroup</h3>
			<p class="text-sm text-neutral-400">
				An inline radio group displays a set of radio options in a horizontal layout.
			</p>
		</div>
		<div class="grid gap-10 md:grid-cols-2">
			<div class="flex flex-col gap-4">
				<div class="flex flex-col gap-2">
					@UsageTitle("/form/inlineRadioGroup.templ")
					<pre class={ DemoPreCodeClasses }>
						<code>
							{ `@uiForm.InlineRadioGroup(uiForm.InlineRadioGroupSettings{
	Label: "Select an option",
	InputSettings: []uiForm.RadioInputSettings{
		{
			Label:           "Option 1",
			StateValue:      "option1",
			TwoWayStatePath: "groupSelection",
		},
		{
			Label:           "Option 2",
			StateValue:      "option2",
			TwoWayStatePath: "groupSelection",
		},
	},

	// OptionalFields
	TwoWayStatePath: "groupSelection",
	InputName:       "group1",
})` }
						</code>
					</pre>
				</div>
				<div class="flex flex-col gap-2">
					<h5 class="text-sm font-bold">Alpine.js Parent State <i>(x-data)</i></h5>
					<pre class={ DemoPreCodeClasses }>
						<code>{ `<div x-data="{groupSelection: 'option2'}"></div>` }</code>
					</pre>
				</div>
			</div>
			<div x-data="{groupSelection: 'option2'}" class="flex flex-col">
				<h4 class="mb-2 text-lg font-bold">Live Example</h4>
				@uiForm.InlineRadioGroup(uiForm.InlineRadioGroupSettings{
					Label: "Select an option",
					InputSettings: []uiForm.RadioInputSettings{
						{
							Label:           "Option 1",
							StateValue:      "option1",
							TwoWayStatePath: "groupSelection",
						},
						{
							Label:           "Option 2",
							StateValue:      "option2",
							TwoWayStatePath: "groupSelection",
						},
					},
					TwoWayStatePath: "groupSelection",
					InputName:       "group1",
				})
			</div>
		</div>
	</div>
}

templ SelectInputDemoOption1() {
	<div class="flex flex-col">
		<h4 class="text-base font-bold">🇦🇷 Argentina</h4>
		<p class="text-sm text-neutral-400">Known for its dance and wine.</p>
	</div>
}

templ SelectInputDemoOption2() {
	<div class="flex flex-col">
		<h4 class="text-base font-bold">🇧🇷 Brazil</h4>
		<p class="text-sm text-neutral-400">Known for its music and natural beauty.</p>
	</div>
}

templ SelectInputDemoOption3() {
	<div class="flex flex-col">
		<h4 class="text-base font-bold">🇨🇱 Chile</h4>
		<p class="text-sm text-neutral-400">Known for its deserts and mysterious islands.</p>
	</div>
}

templ SelectInputDemo() {
	<div class="flex flex-col gap-4">
		<div class="flex flex-col gap-2">
			<h3 class="text-xl font-bold">.SelectInput</h3>
			<p class="text-sm text-neutral-400">
				A select input allows users to select one option from a dropdown list.
			</p>
		</div>
		<div class="grid gap-10 md:grid-cols-2" x-data="{country: 'Brazil'}">
			<div class="flex flex-col gap-4">
				<div class="flex flex-col gap-2">
					<h4 class="text-lg font-bold">
						Usage <span class="text-sm text-neutral-500">(w/FlatOptions)</span>
					</h4>
					<pre class={ DemoPreCodeClasses }>
						<code>
							{ `@uiForm.SelectInput(uiForm.SelectInputSettings{
	InputName: "country",
	Label:     "Country",

	// OptionalFields
	FlatOptions: []string{"Argentina", "Brazil", "Chile"},
	TwoWayStatePath:          "country",
	ShouldIncludeBlankOption: true,
})` }
						</code>
					</pre>
				</div>
				<div class="flex flex-col gap-2">
					<h5 class="text-sm font-bold">Alpine.js Parent State <i>(x-data)</i></h5>
					<pre class={ DemoPreCodeClasses }>
						<code>{ `<div x-data="{country: '` }<span x-text="country"></span>{ `'}"></div>` }</code>
					</pre>
				</div>
			</div>
			<div class="flex flex-col">
				<h4 class="mb-2 text-lg font-bold">Live Example</h4>
				@uiForm.SelectInput(uiForm.SelectInputSettings{
					InputName:                "country",
					Label:                    "Country",
					FlatOptions:              []string{"Argentina", "Brazil", "Chile"},
					TwoWayStatePath:          "country",
					ShouldIncludeBlankOption: true,
				})
			</div>
		</div>
		<div class="my-10 grid gap-10 md:grid-cols-2" x-data="{country: 'BR'}">
			<div class="flex flex-col gap-4">
				<div class="flex flex-col gap-2">
					<h4 class="text-lg font-bold">
						Usage <span class="text-sm text-neutral-500">(w/LabelValueOptions)</span>
					</h4>
					<pre class={ DemoPreCodeClasses }>
						<code>
							{ `@uiForm.SelectInput(uiForm.SelectInputSettings{
	InputName: "country",
	Label:     "Country",

	// OptionalFields
	LabelValueOptions: []uiForm.SelectLabelValueOption{
		{
			Label: "Argentina",
			Value: "AR",
		},
		{
			Label: "Brazil",
			Value: "BR",
		},
		{
			Label: "Chile",
			Value: "CL",
		},
	},
	TwoWayStatePath:          "country",
	ShouldIncludeBlankOption: true,
})` }
						</code>
					</pre>
				</div>
				<div class="flex flex-col gap-2">
					<h5 class="text-sm font-bold">Alpine.js Parent State <i>(x-data)</i></h5>
					<pre class={ DemoPreCodeClasses }>
						<code>{ `<div x-data="{country: '` }<span x-text="country"></span>{ `'}"></div>` }</code>
					</pre>
				</div>
			</div>
			<div class="flex flex-col">
				<h4 class="mb-2 text-lg font-bold">Live Example</h4>
				@uiForm.SelectInput(uiForm.SelectInputSettings{
					InputName: "country",
					Label:     "Country",
					LabelValueOptions: []uiForm.SelectLabelValueOption{
						{
							Label: "Argentina",
							Value: "AR",
						},
						{
							Label: "Brazil",
							Value: "BR",
						},
						{
							Label: "Chile",
							Value: "CL",
						},
					},
					TwoWayStatePath:          "country",
					ShouldIncludeBlankOption: true,
				})
			</div>
		</div>
		<div class="grid gap-10 md:grid-cols-2" x-data="{country: 'BR'}">
			<div class="flex flex-col gap-4">
				<div class="flex flex-col gap-2">
					<h4 class="text-lg font-bold">
						Usage <span class="text-sm text-neutral-500">(w/LabelValueOptions and LabelHtml)</span>
					</h4>
					<pre class={ DemoPreCodeClasses }>
						<code>
							{ `@uiForm.SelectInput(uiForm.SelectInputSettings{
	InputName: "country",
	Label:     "Country",

	// OptionalFields
	LabelValueOptions: []uiForm.SelectLabelValueOption{
		{
			Label:     "Argentina",
			LabelHtml: SelectInputDemoOption1(),
			Value:     "AR",
		},
		{
			Label:     "Brazil",
			LabelHtml: SelectInputDemoOption2(),
			Value:     "BR",
		},
		{
			Label:     "Chile",
			LabelHtml: SelectInputDemoOption3(),
			Value:     "CL",
		},
	},
	TwoWayStatePath:          "country",
	ShouldIncludeBlankOption: true,
})` }
						</code>
					</pre>
				</div>
				<div class="flex flex-col gap-2">
					<h5 class="text-sm font-bold">Alpine.js Parent State <i>(x-data)</i></h5>
					<pre class={ DemoPreCodeClasses }>
						<code>{ `<div x-data="{country: '` }<span x-text="country"></span>{ `'}"></div>` }</code>
					</pre>
				</div>
			</div>
			<div class="flex flex-col gap-3">
				<h4 class="text-lg font-bold">Live Example</h4>
				<p class="text-sm text-neutral-400">Click the dropdown to see the HTML labels.</p>
				@uiForm.SelectInput(uiForm.SelectInputSettings{
					InputName: "country",
					Label:     "Country",
					LabelValueOptions: []uiForm.SelectLabelValueOption{
						{
							Label:     "Argentina",
							LabelHtml: SelectInputDemoOption1(),
							Value:     "AR",
						},
						{
							Label:     "Brazil",
							LabelHtml: SelectInputDemoOption2(),
							Value:     "BR",
						},
						{
							Label:     "Chile",
							LabelHtml: SelectInputDemoOption3(),
							Value:     "CL",
						},
					},
					TwoWayStatePath:          "country",
					ShouldIncludeBlankOption: true,
				})
			</div>
		</div>
	</div>
}

templ AccordionDemoSection1() {
	<p class="text-sm text-neutral-400">This is the content for section 1. You can put any content here.</p>
}

templ AccordionDemoSection2() {
	<p class="text-sm text-neutral-400">This is the content for section 2. You can put any content here.</p>
}

templ AccordionDemoSection3() {
	<p class="text-sm text-neutral-400">This is the content for section 3. You can put any content here.</p>
}

templ AccordionDemo() {
	<div class="flex flex-col gap-4">
		<div class="flex flex-col gap-2">
			<h3 class="text-xl font-bold">.Accordion</h3>
			<p class="text-sm text-neutral-400">
				An accordion is a vertically stacked list of items that can be expanded or collapsed to reveal content.
			</p>
		</div>
		<div class="grid gap-10 md:grid-cols-2">
			<div class="flex flex-col gap-4">
				<div class="flex flex-col gap-2">
					@UsageTitle("/display/accordion.templ")
					<pre class={ DemoPreCodeClasses }>
						<code>
							{ `@uiDisplay.Accordion(uiDisplay.AccordionSettings{
	Items: []uiDisplay.AccordionItemSettings{
		{
			Title: "Section 1",
			Content: AccordionDemoSection1(),
			Icon: "ph-info",
		},
		{
			Title: "Section 2",
			Content: AccordionDemoSection2(),
		},
		{
			Title: "Section 3",
			Content: AccordionDemoSection3(),
		},
	},
})` }
						</code>
					</pre>
				</div>
			</div>
			<div class="flex flex-col">
				<h4 class="mb-2 text-lg font-bold">Live Example</h4>
				@uiDisplay.Accordion(uiDisplay.AccordionSettings{
					Items: []uiDisplay.AccordionItemSettings{
						{
							Title:   "Section 1",
							Content: AccordionDemoSection1(),
							Icon:    "ph-info",
						},
						{
							Title:   "Section 2",
							Content: AccordionDemoSection2(),
							Icon:    "ph-warning",
						},
						{
							Title:   "Section 3",
							Content: AccordionDemoSection3(),
							Icon:    "ph-check",
						},
					},
				})
			</div>
		</div>
	</div>
}

templ TagDemo() {
	<div class="flex flex-col gap-4">
		<div class="flex flex-row flex-wrap items-center gap-x-20 gap-y-10">
			<div class="flex flex-col gap-2">
				<h3 class="text-xl font-bold">.Tag</h3>
				<p class="text-sm text-neutral-400">
					A tag is a small label that can be used to categorize or identify content.
				</p>
			</div>
			<div class="flex flex-col gap-2">
				@UsageTitle("/display/tag.templ")
				<pre class={ DemoPreCodeClasses }>
					<code>
						{ `@uiDisplay.Tag(uiDisplay.TagSettings{
	OuterLeftIcon: "ph-info",
	OuterLeftLabel: "Info",
	OuterRadius: uiDisplay.TagRadiusMd,
	InnerIcon: "ph-warning",
	InnerLabel: "Warning",
	Size: uiDisplay.TagSizeXs,
})` }
					</code>
				</pre>
			</div>
		</div>
		<div class="flex flex-col gap-4">
			<h4 class="mb-2 text-lg font-bold">Live Example</h4>
			<div class="flex flex-row flex-wrap items-center gap-10">
				<div class="flex flex-col gap-2">
					<p class="text-sm text-neutral-400">TagSizeXs to TagSizeXl</p>
					for _, tagSize := range []string{"xs", "sm", "md", "lg", "xl"} {
						@uiDisplay.Tag(uiDisplay.TagSettings{
							OuterLeftIcon:  "ph-info",
							OuterLeftLabel: "Info",
							InnerIcon:      "ph-warning",
							InnerLabel:     "Warning",
							Size:           tagSize,
						})
					}
				</div>
				<div class="flex flex-col gap-2">
					<p class="text-sm text-neutral-400">
						TagRadiusNone to TagRadiusFull
						<br/>
						<small>(OuterRadius & InnerRadius)</small>
					</p>
					for _, tagRadius := range []string{"none", "xs", "sm", "md", "lg", "xl", "full"} {
						@uiDisplay.Tag(uiDisplay.TagSettings{
							OuterLeftIcon:  "ph-info",
							OuterLeftLabel: "Info",
							OuterRadius:    tagRadius,
							InnerIcon:      "ph-warning",
							InnerLabel:     "Warning",
							InnerRadius:    tagRadius,
						})
					}
				</div>
				<div class="flex flex-col gap-2">
					<p class="text-sm text-neutral-400">
						OuterRingColor
						<br/>
						<small>(w/ OuterBackgroundColor "transparent")</small>
					</p>
					for _, tagRingColor := range []string{"red-500", "amber-500", "emerald-500", "cyan-500", "violet-500", "gray-500"} {
						@uiDisplay.Tag(uiDisplay.TagSettings{
							OuterLeftIcon:        "ph-info",
							OuterLeftLabel:       "Info",
							OuterRingColor:       tagRingColor,
							OuterBackgroundColor: "transparent",
							OuterTextColor:       "neutral-50",
							InnerIcon:            "ph-warning",
							InnerLabel:           "Warning",
						})
					}
				</div>
				<div class="flex flex-col gap-2">
					<p class="text-sm text-neutral-400">
						OuterBackgroundColor
						<br/>
						<small>(w/o OuterRingColor)</small>
					</p>
					for _, tagBackgroundColor := range []string{"red-500", "amber-500", "emerald-500", "cyan-500", "violet-500", "gray-500"} {
						@uiDisplay.Tag(uiDisplay.TagSettings{
							OuterLeftIcon:        "ph-info",
							OuterLeftLabel:       "Info",
							OuterBackgroundColor: tagBackgroundColor,
							OuterTextColor:       "neutral-50",
							InnerIcon:            "ph-warning",
							InnerLabel:           "Warning",
						})
					}
				</div>
				<div class="flex flex-col gap-2">
					<p class="text-sm text-neutral-400">InnerBackgroundColor</p>
					for _, innerColor := range []string{"red-500", "amber-500", "emerald-500", "cyan-500", "violet-500", "gray-500"} {
						@uiDisplay.Tag(uiDisplay.TagSettings{
							OuterLeftIcon:        "ph-info",
							OuterLeftLabel:       "Info",
							InnerIcon:            "ph-warning",
							InnerLabel:           "Warning",
							InnerBackgroundColor: innerColor,
						})
					}
				</div>
				<div x-data="{clickCount: 0}" class="flex flex-col gap-2">
					<p class="text-sm text-neutral-400">Side Elements OnClickFunc</p>
					<div class="flex flex-col gap-2">
						@uiDisplay.Tag(uiDisplay.TagSettings{
							OuterLeftIcon:             "ph-plus",
							OuterLeftLabel:            "Add",
							OuterLeftOnClickFunc:      "clickCount++",
							OuterRightIcon:            "ph-minus",
							OuterRightLabel:           "Remove",
							OuterRightOnClickFunc:     "if(clickCount > 0) clickCount--",
							InnerIcon:                 "ph-hash",
							InnerLabelOneWayStatePath: "clickCount",
						})
					</div>
				</div>
			</div>
		</div>
	</div>
}

templ ButtonDemo() {
	<div class="flex flex-col gap-4">
		<div class="flex flex-row flex-wrap items-center gap-x-20 gap-y-10">
			<div class="flex flex-col gap-2">
				<h3 class="text-xl font-bold">.Button</h3>
				<p class="text-sm text-neutral-400">
					A button is a clickable element that can be used to trigger an action.
				</p>
			</div>
			<div class="flex flex-col gap-2">
				@UsageTitle("/control/button.templ")
				<pre class={ DemoPreCodeClasses }>
					<code>
						{ `@uiControl.Button(uiControl.ButtonSettings{
	Label:       "Click me",
	IconLeft:    "ph-info",
	OnClickFunc: "alert('Button clicked!')",
})` }
					</code>
				</pre>
			</div>
		</div>
		<div class="flex flex-col gap-4">
			<h4 class="mb-2 text-lg font-bold">Live Example</h4>
			<div class="flex flex-row flex-wrap items-start gap-10">
				<div class="flex flex-col gap-2">
					<p class="text-sm text-neutral-400">ButtonSizeXs to ButtonSizeXl</p>
					<div class="flex flex-col gap-2">
						@uiControl.Button(uiControl.ButtonSettings{
							Label:    "Button",
							IconLeft: "ph-info",
							Size:     uiControl.ButtonSizeXs,
						})
						@uiControl.Button(uiControl.ButtonSettings{
							Label:    "Button",
							IconLeft: "ph-info",
							Size:     uiControl.ButtonSizeSm,
						})
						@uiControl.Button(uiControl.ButtonSettings{
							Label:    "Button",
							IconLeft: "ph-info",
							Size:     uiControl.ButtonSizeMd,
						})
						@uiControl.Button(uiControl.ButtonSettings{
							Label:    "Button",
							IconLeft: "ph-info",
							Size:     uiControl.ButtonSizeLg,
						})
						@uiControl.Button(uiControl.ButtonSettings{
							Label:    "Button",
							IconLeft: "ph-info",
							Size:     uiControl.ButtonSizeXl,
						})
					</div>
				</div>
				<div class="flex flex-col gap-2">
					<p class="text-sm text-neutral-400">Button Shapes</p>
					<div class="flex flex-col gap-2">
						@uiControl.Button(uiControl.ButtonSettings{
							Label: "Square",
							Shape: uiControl.ButtonShapeSquare,
						})
						@uiControl.Button(uiControl.ButtonSettings{
							Label: "Rounded",
							Shape: uiControl.ButtonShapeRounded,
						})
						@uiControl.Button(uiControl.ButtonSettings{
							Label: "Circular",
							Shape: uiControl.ButtonShapeCircular,
						})
					</div>
				</div>
				<div class="flex flex-col gap-2">
					<p class="text-sm text-neutral-400">IconLeft & IconRight</p>
					<div class="flex flex-col gap-2">
						@uiControl.Button(uiControl.ButtonSettings{
							Label:    "Info",
							IconLeft: "ph-info",
						})
						@uiControl.Button(uiControl.ButtonSettings{
							Label:     "Warning",
							IconRight: "ph-warning",
						})
					</div>
				</div>
				<div class="flex flex-col gap-2">
					<p class="text-sm text-neutral-400">Button Colors</p>
					<div class="flex flex-col gap-2">
						@uiControl.Button(uiControl.ButtonSettings{
							Label:    "Default",
							IconLeft: "ph-info",
						})
						@uiControl.Button(uiControl.ButtonSettings{
							Label:           "Red",
							IconLeft:        "ph-warning",
							BackgroundColor: "red-500",
						})
						@uiControl.Button(uiControl.ButtonSettings{
							Label:           "Green",
							IconRight:       "ph-check",
							BackgroundColor: "emerald-500",
						})
						@uiControl.Button(uiControl.ButtonSettings{
							Label:           "Secondary",
							IconLeft:        "ph-star",
							BackgroundColor: "secondary-500",
						})
					</div>
				</div>
				<div class="flex flex-col gap-2">
					<p class="text-sm text-neutral-400">Button with Ring</p>
					<div class="flex flex-col gap-3">
						@uiControl.Button(uiControl.ButtonSettings{
							Label:           "Red Ring",
							BackgroundColor: "red-500/10",
							RingColor:       "red-500",
							RingThickness:   uiControl.ButtonRingThicknessMd,
						})
						@uiControl.Button(uiControl.ButtonSettings{
							Label:                "Green Hover",
							BackgroundColor:      "yellow-500/10",
							BackgroundColorHover: "green-500/10",
							RingColor:            "yellow-500",
							RingColorHover:       "green-500",
							RingThickness:        uiControl.ButtonRingThicknessMd,
						})
						@uiControl.Button(uiControl.ButtonSettings{
							Label:         "ThicknessXs",
							RingColor:     "blue-500",
							RingThickness: uiControl.ButtonRingThicknessXs,
						})
						@uiControl.Button(uiControl.ButtonSettings{
							Label:         "ThicknessXl",
							RingColor:     "violet-500",
							RingThickness: uiControl.ButtonRingThicknessXl,
						})
					</div>
				</div>
				<div class="flex flex-col gap-2">
					<p class="text-sm text-neutral-400">Button with Tooltip</p>
					<div class="flex flex-col gap-2">
						@uiControl.Button(uiControl.ButtonSettings{
							Label:           "Top Tooltip",
							IconLeft:        "ph-arrow-up",
							TooltipContent:  "This tooltip appears on top",
							TooltipPosition: uiControl.ButtonTooltipPositionTop,
						})
						@uiControl.Button(uiControl.ButtonSettings{
							Label:           "Bottom Tooltip",
							IconLeft:        "ph-arrow-down",
							TooltipContent:  "This tooltip appears on bottom",
							TooltipPosition: uiControl.ButtonTooltipPositionBottom,
						})
						@uiControl.Button(uiControl.ButtonSettings{
							Label:           "Left Tooltip",
							IconLeft:        "ph-arrow-left",
							TooltipContent:  "This tooltip appears on left",
							TooltipPosition: uiControl.ButtonTooltipPositionLeft,
						})
						@uiControl.Button(uiControl.ButtonSettings{
							Label:           "Right Tooltip",
							IconLeft:        "ph-arrow-right",
							TooltipContent:  "This tooltip appears on right",
							TooltipPosition: uiControl.ButtonTooltipPositionRight,
						})
					</div>
				</div>
				<div
					x-data="{clickCount: 0, get shouldDisable() { return this.clickCount > 0 }}"
					class="flex flex-col gap-2"
				>
					<p class="text-sm text-neutral-400">IsDisabledOneWayStatePath</p>
					<div class="flex flex-col gap-2">
						@uiControl.Button(uiControl.ButtonSettings{
							Label:                     "Click Me",
							IconLeft:                  "ph-plus",
							OnClickFunc:               "clickCount++",
							IsDisabledOneWayStatePath: "shouldDisable",
							IsFullWidth:               true,
						})
						<div class="flex flex-row items-center gap-2">
							<p class="flex gap-2 text-sm text-neutral-400">
								Count: <span x-text="clickCount"></span>
							</p>
							@uiControl.Button(uiControl.ButtonSettings{
								IconLeft:    "ph-arrow-counter-clockwise",
								OnClickFunc: "clickCount = 0",
								Size:        uiControl.ButtonSizeSm,
								Shape:       uiControl.ButtonShapeCircular,
							})
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
}

templ SidebarDemoHeader() {
	<div class="flex flex-col gap-2 overflow-hidden p-3">
		<h4 class="text-wrap break-words text-lg font-bold" x-show="!isCollapsed">Sidebar Header</h4>
		<h4 class="text-wrap break-words text-lg font-bold" x-show="isCollapsed">SH</h4>
		<p class="text-sm text-neutral-400" x-show="!isCollapsed">This is the header content</p>
	</div>
}

templ SidebarDemoMiddle() {
	<div class="flex flex-col gap-5 p-3">
		<div class="flex flex-col gap-2">
			<h4 class="text-lg font-bold" x-show="!isCollapsed">Navigation</h4>
			<h4 class="text-center text-lg font-bold" x-show="isCollapsed">N</h4>
			<div class="flex flex-col gap-1" :class="{'*:justify-center': isCollapsed}">
				<a href="#" class="flex items-center gap-2 rounded-md p-2 text-neutral-50 hover:bg-neutral-800">
					<i class="ph-duotone ph-house"></i>
					<span x-show="!isCollapsed">Home</span>
				</a>
				<a href="#" class="flex items-center gap-2 rounded-md bg-neutral-800 p-2 text-neutral-50">
					<i class="ph-duotone ph-chart-line-up"></i>
					<span x-show="!isCollapsed">Dashboard</span>
				</a>
				<a href="#" class="flex items-center gap-2 rounded-md p-2 text-neutral-50 hover:bg-neutral-800">
					<i class="ph-duotone ph-gear"></i>
					<span x-show="!isCollapsed">Settings</span>
				</a>
			</div>
		</div>
		<div class="flex flex-col gap-2">
			<h4 class="text-lg font-bold" x-show="!isCollapsed">Recent Items</h4>
			<h4 class="text-center text-lg font-bold" x-show="isCollapsed">R</h4>
			<div class="flex flex-col gap-1" :class="{'*:justify-center': isCollapsed}">
				for i := 1; i <= 3; i++ {
					<div class="flex items-center gap-2 rounded-md p-2 text-neutral-400">
						<i class="ph-duotone ph-file-text"></i>
						<span x-show="!isCollapsed">Document { i }</span>
					</div>
				}
			</div>
		</div>
		<div class="flex flex-col gap-2">
			<h4 class="text-lg font-bold" x-show="!isCollapsed">Projects</h4>
			<h4 class="text-center text-lg font-bold" x-show="isCollapsed">P</h4>
			<div class="flex flex-col gap-1" :class="{'*:justify-center': isCollapsed}">
				for i := 1; i <= 10; i++ {
					<div class="flex items-center gap-2 rounded-md p-2 text-neutral-400">
						<i class="ph-duotone ph-folder"></i>
						<span x-show="!isCollapsed">Project { i }</span>
					</div>
				}
			</div>
		</div>
	</div>
}

templ SidebarDemoFooter() {
	<div class="flex flex-col gap-2 p-3">
		<h4 class="text-wrap break-words text-lg font-bold" x-show="!isCollapsed">Sidebar Footer</h4>
		<h4 class="text-wrap break-words text-lg font-bold" x-show="isCollapsed">SF</h4>
		<p class="text-sm text-neutral-400" x-show="!isCollapsed">This is the footer content</p>
	</div>
}

templ SidebarDemo() {
	<div class="flex flex-col gap-4">
		<div class="flex flex-row flex-wrap items-center gap-10">
			<div class="flex flex-col gap-2">
				<h3 class="text-xl font-bold">.Sidebar</h3>
				<p class="text-sm text-neutral-400">
					A sidebar is a vertical navigation component that can contain various types of content.
				</p>
			</div>
			<div class="flex flex-col gap-2">
				@UsageTitle("/display/sidebar.templ")
				<pre class={ DemoPreCodeClasses }>
					<code>
						{ `@uiDisplay.Sidebar(uiDisplay.SidebarSettings{
	MiddleContent: SidebarDemoMiddle(),

	// OptionalFields
	HeaderContent:                 SidebarDemoHeader(),
	FooterContent:                 SidebarDemoFooter(),
	BackgroundColor:               "bg-neutral-50/5",
	IsVisibleTwoWayStatePath:      "isVisible",
	IsCollapsedTwoWayStatePath:    "isCollapsed",
	AttachmentModeTwoWayStatePath: "attachmentMode",
	SideTwoWayStatePath:           "side",
	IsOffCanvasTwoWayStatePath:    "isOffCanvas",
})` }
					</code>
				</pre>
			</div>
		</div>
		<div class="flex flex-col gap-4">
			<h4 class="mb-2 text-lg font-bold">Live Example</h4>
			<div
				class="grid items-center gap-10 md:grid-cols-2"
				x-data="{isVisible: true, isCollapsed: false, attachmentMode: 'inline', side: 'left', isOffCanvas: false}"
			>
				<div class="flex flex-col gap-4">
					<div class="flex flex-col gap-2">
						<h5 class="text-sm font-bold">Alpine.js Parent State <i>(x-data)</i></h5>
						<pre class={ DemoPreCodeClasses }>
							<code>
								{ `<div x-data="{
  isVisible: true,
  isCollapsed: false,
  attachmentMode: 'inline',
  side: 'left',
  isOffCanvas: false
}"></div>` }
							</code>
						</pre>
					</div>
					<div class="flex flex-col gap-2">
						<p class="text-sm text-neutral-400">Controls</p>
						<div class="flex flex-wrap gap-2">
							@uiControl.Button(uiControl.ButtonSettings{
								Label:       "Toggle Visibility",
								IconLeft:    "ph-eye",
								OnClickFunc: "isVisible = !isVisible",
								Size:        uiControl.ButtonSizeSm,
							})
							@uiControl.Button(uiControl.ButtonSettings{
								Label:       "Toggle Collapsed",
								IconLeft:    "ph-arrows-in",
								OnClickFunc: "isCollapsed = !isCollapsed",
								Size:        uiControl.ButtonSizeSm,
							})
						</div>
					</div>
					<div class="flex flex-col gap-2">
						<p class="text-sm text-neutral-400">AttachmentMode</p>
						<div class="flex flex-wrap gap-2">
							@uiControl.Button(uiControl.ButtonSettings{
								Label:           "Inline",
								IconLeft:        "ph-layout",
								OnClickFunc:     "attachmentMode = 'inline'",
								Size:            uiControl.ButtonSizeSm,
								BackgroundColor: "neutral-50/10",
							})
							@uiControl.Button(uiControl.ButtonSettings{
								Label:       "Fixed",
								IconLeft:    "ph-push-pin",
								OnClickFunc: "attachmentMode = 'fixed'",
								Size:        uiControl.ButtonSizeSm,
							})
						</div>
					</div>
					<div class="flex flex-col gap-2">
						<p class="text-sm text-neutral-400">OffCanvas</p>
						<div class="flex flex-wrap gap-2">
							@uiControl.Button(uiControl.ButtonSettings{
								Label:           "Off",
								IconLeft:        "ph-x",
								OnClickFunc:     "isOffCanvas = false",
								Size:            uiControl.ButtonSizeSm,
								BackgroundColor: "neutral-50/10",
							})
							@uiControl.Button(uiControl.ButtonSettings{
								Label:       "On",
								IconLeft:    "ph-check",
								OnClickFunc: "isOffCanvas = true",
								Size:        uiControl.ButtonSizeSm,
							})
						</div>
					</div>
					<div class="flex flex-col gap-2">
						<p class="text-sm text-neutral-400">Side</p>
						<div class="flex flex-wrap gap-2">
							@uiControl.Button(uiControl.ButtonSettings{
								Label:           "Left",
								IconLeft:        "ph-align-left",
								OnClickFunc:     "side = 'left'",
								Size:            uiControl.ButtonSizeSm,
								BackgroundColor: "neutral-50/10",
							})
							@uiControl.Button(uiControl.ButtonSettings{
								Label:       "Right",
								IconLeft:    "ph-align-right",
								OnClickFunc: "side = 'right'",
								Size:        uiControl.ButtonSizeSm,
							})
						</div>
					</div>
				</div>
				<div class="h-128 flex-none overflow-hidden rounded-md border border-neutral-800">
					@uiDisplay.Sidebar(uiDisplay.SidebarSettings{
						MiddleContent:                 SidebarDemoMiddle(),
						HeaderContent:                 SidebarDemoHeader(),
						FooterContent:                 SidebarDemoFooter(),
						BackgroundColor:               "bg-neutral-50/5",
						IsVisibleTwoWayStatePath:      "isVisible",
						IsCollapsedTwoWayStatePath:    "isCollapsed",
						AttachmentModeTwoWayStatePath: "attachmentMode",
						SideTwoWayStatePath:           "side",
						IsOffCanvasTwoWayStatePath:    "isOffCanvas",
					})
				</div>
			</div>
		</div>
	</div>
}

templ RangeSliderDemo() {
	<div class="flex flex-col gap-4">
		<div class="flex flex-row flex-wrap items-center gap-10">
			<div class="flex flex-col gap-2">
				<h3 class="text-xl font-bold">.RangeSlider</h3>
				<p class="text-sm text-neutral-400">
					A range slider allows users to select a value from a range by dragging a thumb along a track.
				</p>
			</div>
			<div class="flex flex-row flex-wrap items-center gap-10">
				<div class="flex flex-col gap-2">
					@UsageTitle("/control/rangeSlider.templ")
					<pre class={ DemoPreCodeClasses }>
						<code>
							{ `@uiControl.RangeSlider(uiControl.RangeSliderSettings{
	ThumbValueTwoWayStatePath: "sliderValue",
	TrackStartValue:           "0",
	TrackEndValue:             "100",
	TrackSteps:                "1",
})` }
						</code>
					</pre>
				</div>
				<div class="flex flex-col gap-2">
					<h5 class="text-sm font-bold">Alpine.js Parent State <i>(x-data)</i></h5>
					<pre class={ DemoPreCodeClasses }>
						<code>{ `<div x-data="{sliderValue: 50}"></div>` }</code>
					</pre>
				</div>
			</div>
		</div>
		<div class="flex flex-col gap-4">
			<h4 class="mb-2 text-lg font-bold">Live Example</h4>
			<div
				x-data="{sliderValue: 50}"
				class="lg:*:max-w-64 flex flex-row flex-wrap items-start justify-between gap-10"
			>
				<div class="flex w-full flex-col gap-2">
					<p class="text-sm text-neutral-400">Basic Slider</p>
					@uiControl.RangeSlider(uiControl.RangeSliderSettings{
						ThumbValueTwoWayStatePath: "sliderValue",
					})
					<p class="text-sm text-neutral-400">Value: <span x-text="sliderValue"></span></p>
				</div>
				<div class="flex w-full flex-col gap-2">
					<p class="text-sm text-neutral-400">RangeSliderSizeXs to RangeSliderSizeXl</p>
					<div class="flex flex-col gap-3">
						@uiControl.RangeSlider(uiControl.RangeSliderSettings{
							ThumbValueTwoWayStatePath: "sliderValue",
							Size:                      uiControl.RangeSliderSizeXs,
						})
						@uiControl.RangeSlider(uiControl.RangeSliderSettings{
							ThumbValueTwoWayStatePath: "sliderValue",
							Size:                      uiControl.RangeSliderSizeSm,
						})
						@uiControl.RangeSlider(uiControl.RangeSliderSettings{
							ThumbValueTwoWayStatePath: "sliderValue",
							Size:                      uiControl.RangeSliderSizeMd,
						})
						@uiControl.RangeSlider(uiControl.RangeSliderSettings{
							ThumbValueTwoWayStatePath: "sliderValue",
							Size:                      uiControl.RangeSliderSizeLg,
						})
						@uiControl.RangeSlider(uiControl.RangeSliderSettings{
							ThumbValueTwoWayStatePath: "sliderValue",
							Size:                      uiControl.RangeSliderSizeXl,
						})
					</div>
				</div>
				<div class="flex w-full flex-col gap-2">
					<p class="text-sm text-neutral-400">Thumb Shapes</p>
					<div class="flex flex-col gap-3">
						@uiControl.RangeSlider(uiControl.RangeSliderSettings{
							ThumbValueTwoWayStatePath: "sliderValue",
							ThumbShape:                uiControl.RangeSliderThumbShapeCircular,
						})
						@uiControl.RangeSlider(uiControl.RangeSliderSettings{
							ThumbValueTwoWayStatePath: "sliderValue",
							ThumbShape:                uiControl.RangeSliderThumbShapeRounded,
						})
						@uiControl.RangeSlider(uiControl.RangeSliderSettings{
							ThumbValueTwoWayStatePath: "sliderValue",
							ThumbShape:                uiControl.RangeSliderThumbShapeSquare,
						})
						@uiControl.RangeSlider(uiControl.RangeSliderSettings{
							ThumbValueTwoWayStatePath: "sliderValue",
							ThumbShape:                uiControl.RangeSliderThumbShapePipe,
						})
					</div>
				</div>
				<div class="flex w-full flex-col gap-2">
					<p class="text-sm text-neutral-400">Thumb Colors & Icons</p>
					<div class="flex flex-col gap-3">
						@uiControl.RangeSlider(uiControl.RangeSliderSettings{
							ThumbValueTwoWayStatePath: "sliderValue",
							ThumbBackgroundColor:      "red-500",
						})
						@uiControl.RangeSlider(uiControl.RangeSliderSettings{
							ThumbValueTwoWayStatePath: "sliderValue",
							ThumbBackgroundColor:      "emerald-500",
							ThumbLabelIcon:            "ph-check",
						})
						@uiControl.RangeSlider(uiControl.RangeSliderSettings{
							ThumbValueTwoWayStatePath: "sliderValue",
							ThumbBackgroundColor:      "secondary-500",
							ThumbTextColor:            "neutral-800",
							ThumbLabelIcon:            "ph-star",
						})
						@uiControl.RangeSlider(uiControl.RangeSliderSettings{
							ThumbValueTwoWayStatePath: "sliderValue",
							ThumbBackgroundColor:      "secondary-500",
							ThumbTextColor:            "neutral-50",
							ThumbLabelOneWayStatePath: "sliderValue",
						})
					</div>
				</div>
				<div class="flex w-full flex-col gap-2">
					<p class="text-sm text-neutral-400">ThumbValueBubble</p>
					<div class="flex flex-col gap-3">
						@uiControl.RangeSlider(uiControl.RangeSliderSettings{
							ThumbValueTwoWayStatePath:       "sliderValue",
							ThumbValueBubbleEnabled:         true,
							ThumbValueBubblePosition:        uiControl.RangeSliderThumbValueBubblePositionTop,
							ThumbValueBubbleBackgroundColor: "red-500",
							ThumbValueBubbleTextColor:       "neutral-50",
						})
						@uiControl.RangeSlider(uiControl.RangeSliderSettings{
							ThumbValueTwoWayStatePath:       "sliderValue",
							ThumbValueBubbleEnabled:         true,
							ThumbValueBubblePosition:        uiControl.RangeSliderThumbValueBubblePositionBottom,
							ThumbValueBubbleBackgroundColor: "emerald-500",
							ThumbValueBubbleTextColor:       "neutral-50",
						})
						@uiControl.RangeSlider(uiControl.RangeSliderSettings{
							ThumbValueTwoWayStatePath:       "sliderValue",
							ThumbValueBubbleEnabled:         true,
							ThumbValueBubblePosition:        uiControl.RangeSliderThumbValueBubblePositionTop,
							ThumbValueBubbleBackgroundColor: "transparent",
							ThumbValueBubbleTextColor:       "neutral-50",
							ThumbValueBubbleSize:            uiControl.RangeSliderThumbValueBubbleSizeLg,
							ThumbValueBubbleShape:           uiControl.RangeSliderThumbValueBubbleShapeRounded,
							ThumbValueBubbleRingColor:       "violet-500",
							ThumbValueBubbleRingThickness:   uiControl.RangeSliderThumbValueBubbleRingThicknessXl,
						})
					</div>
				</div>
				<div class="flex w-full flex-col gap-2">
					<p class="text-sm text-neutral-400">Track Labels Positions</p>
					<div class="flex flex-col gap-3">
						@uiControl.RangeSlider(uiControl.RangeSliderSettings{
							ThumbValueTwoWayStatePath:   "sliderValue",
							TrackStartValue:             "0",
							TrackEndValue:               "100",
							TrackStartValueLabelEnabled: true,
							TrackEndValueLabelEnabled:   true,
						})
						@uiControl.RangeSlider(uiControl.RangeSliderSettings{
							ThumbValueTwoWayStatePath:    "sliderValue",
							TrackStartValue:              "0",
							TrackEndValue:                "100",
							TrackStartValueLabelEnabled:  true,
							TrackStartValueLabelPosition: uiControl.RangeSliderTrackValueLabelPositionTop,
							TrackEndValueLabelEnabled:    true,
							TrackEndValueLabelPosition:   uiControl.RangeSliderTrackValueLabelPositionTop,
						})
						@uiControl.RangeSlider(uiControl.RangeSliderSettings{
							ThumbValueTwoWayStatePath:    "sliderValue",
							TrackStartValue:              "0",
							TrackEndValue:                "100",
							TrackStartValueLabelEnabled:  true,
							TrackStartValueLabelPosition: uiControl.RangeSliderTrackValueLabelPositionBottom,
							TrackEndValueLabelEnabled:    true,
							TrackEndValueLabelPosition:   uiControl.RangeSliderTrackValueLabelPositionBottom,
						})
					</div>
				</div>
				<div class="flex w-full flex-col gap-2">
					<p class="text-sm text-neutral-400">Track Colors & Icons</p>
					<div class="flex flex-col gap-3">
						@uiControl.RangeSlider(uiControl.RangeSliderSettings{
							ThumbValueTwoWayStatePath:     "sliderValue",
							TrackStartValue:               "0",
							TrackEndValue:                 "100",
							TrackStartValueLabelEnabled:   true,
							TrackStartValueLabelTextColor: "red-500",
							TrackEndValueLabelEnabled:     true,
							TrackEndValueLabelTextColor:   "cyan-500",
						})
						@uiControl.RangeSlider(uiControl.RangeSliderSettings{
							ThumbValueTwoWayStatePath:     "sliderValue",
							TrackStartValue:               "0",
							TrackEndValue:                 "100",
							TrackBackgroundColorFrom:      "red-500",
							TrackBackgroundColorVia:       "emerald-500",
							TrackBackgroundColorTo:        "cyan-500",
							TrackStartValueLabelEnabled:   true,
							TrackStartValueLabelTextColor: "red-500",
							TrackEndValueLabelEnabled:     true,
							TrackEndValueLabelTextColor:   "cyan-500",
						})
						@uiControl.RangeSlider(uiControl.RangeSliderSettings{
							Size:                          uiControl.RangeSliderSizeLg,
							ThumbValueTwoWayStatePath:     "sliderValue",
							TrackStartValue:               "0",
							TrackEndValue:                 "100",
							TrackBackgroundColorFrom:      "amber-500",
							TrackBackgroundColorTo:        "sky-700",
							TrackStartValueLabelEnabled:   false,
							TrackStartValueLabelIcon:      "ph-sun",
							TrackStartValueLabelTextColor: "amber-500",
							TrackEndValueLabelEnabled:     false,
							TrackEndValueLabelIcon:        "ph-moon-stars",
							TrackEndValueLabelTextColor:   "sky-700",
						})
					</div>
				</div>
				<div class="flex w-full flex-col gap-2">
					<p class="text-sm text-neutral-400">Dual Mode</p>
					<div x-data="{lowerValue: 25, upperValue: 75}" class="flex flex-col gap-3">
						@uiControl.RangeSlider(uiControl.RangeSliderSettings{
							ThumbDualValueModeEnabled:      true,
							ThumbBackgroundColor:           "emerald-500",
							ThumbValueTwoWayStatePath:      "lowerValue",
							ThumbUpperValueTwoWayStatePath: "upperValue",
							ThumbValueBubbleEnabled:        true,
							ThumbUpperValueBubbleEnabled:   true,
							TrackStartValue:                "0",
							TrackEndValue:                  "100",
							TrackSteps:                     "1",
							TrackStartValueLabelEnabled:    true,
							TrackEndValueLabelEnabled:      true,
						})
						<p class="text-sm text-neutral-400">Price Range: $<span x-text="lowerValue"></span> - $<span x-text="upperValue"></span></p>
						@uiControl.RangeSlider(uiControl.RangeSliderSettings{
							ThumbShape:                           uiControl.RangeSliderThumbShapePipe,
							ThumbDualValueModeEnabled:            true,
							ThumbBackgroundColor:                 "emerald-500",
							ThumbValueTwoWayStatePath:            "lowerValue",
							ThumbValueBubbleBackgroundColor:      "emerald-500",
							ThumbValueBubblePosition:             uiControl.RangeSliderThumbValueBubblePositionBottom,
							ThumbValueBubbleShape:                uiControl.RangeSliderThumbValueBubbleShapeSquare,
							ThumbUpperBackgroundColor:            "red-500",
							ThumbUpperValueTwoWayStatePath:       "upperValue",
							ThumbUpperValueBubbleBackgroundColor: "red-500",
							ThumbUpperValueBubblePosition:        uiControl.RangeSliderThumbValueBubblePositionTop,
							ThumbUpperValueBubbleShape:           uiControl.RangeSliderThumbValueBubbleShapeCircular,
							ThumbValueBubbleEnabled:              true,
							ThumbUpperValueBubbleEnabled:         true,
							TrackSteps:                           "1",
							TrackFillColorFrom:                   "emerald-500",
							TrackFillColorTo:                     "red-500",
							TrackStartValue:                      "0",
							TrackEndValue:                        "100",
							TrackStartValueLabelEnabled:          true,
							TrackEndValueLabelEnabled:            true,
						})
					</div>
				</div>
			</div>
		</div>
	</div>
}

templ ToastDemo() {
	<div class="flex flex-col gap-4">
		<div class="flex flex-row flex-wrap items-center gap-10">
			<div class="flex flex-col gap-2">
				<h3 class="text-xl font-bold">.Toast</h3>
				<p class="text-sm text-neutral-400">
					A toast is a temporary notification displayed to provide feedback to users.
				</p>
			</div>
			<div class="flex flex-col gap-2">
				@UsageTitle("/display/toast.templ")
				<pre class={ DemoPreCodeClasses }>
					<code>
						{ `@uiDisplay.Toast(uiDisplay.ToastSettings{
	// OptionalFields
	BackgroundColor: "neutral-800",
	TextColor:       "neutral-50",
	Size:            uiDisplay.ToastSizeMd,
	RingThickness:   uiDisplay.ToastRingThicknessMd,
	RingColor:       "neutral-500",
	Radius:          uiDisplay.ToastRadiusMd,
})` }
					</code>
				</pre>
			</div>
		</div>
		<div class="flex flex-col gap-4">
			<h4 class="mb-2 text-lg font-bold">Live Example</h4>
			@uiDisplay.Toast(uiDisplay.ToastSettings{
				BackgroundColor: "neutral-800",
				TextColor:       "neutral-50",
				Size:            uiDisplay.ToastSizeMd,
				RingThickness:   uiDisplay.ToastRingThicknessMd,
				RingColor:       "neutral-500",
				Radius:          uiDisplay.ToastRadiusMd,
			})
			<div class="flex flex-col gap-4">
				<div class="flex flex-wrap gap-2" x-data>
					@uiControl.Button(uiControl.ButtonSettings{
						Label:           "Show Success Toast",
						IconLeft:        "ph-check",
						OnClickFunc:     "$store.toast.displayToast('Operation completed successfully!', 'success')",
						Size:            uiControl.ButtonSizeSm,
						BackgroundColor: "emerald-500",
					})
					@uiControl.Button(uiControl.ButtonSettings{
						Label:           "Show Warning Toast",
						IconLeft:        "ph-warning",
						OnClickFunc:     "$store.toast.displayToast('This is a warning message.', 'partialSuccess')",
						Size:            uiControl.ButtonSizeSm,
						BackgroundColor: "yellow-500",
					})
					@uiControl.Button(uiControl.ButtonSettings{
						Label:           "Show Error Toast",
						IconLeft:        "ph-x",
						OnClickFunc:     "$store.toast.displayToast('An error occurred!', 'danger')",
						Size:            uiControl.ButtonSizeSm,
						BackgroundColor: "red-500",
					})
				</div>
			</div>
		</div>
	</div>
}

templ LoadingOverlayDemo() {
	<div class="flex flex-col gap-4">
		<div class="grid items-center gap-10 md:grid-cols-2">
			<div class="flex flex-col gap-2">
				<h3 class="text-xl font-bold">
					.LoadingOverlay <i class="text-sm text-neutral-500">(htmx-ready)</i>
				</h3>
				<p class="text-sm text-neutral-400">
					A loading overlay displays a loading indicator over content to show that an operation is in progress.
				</p>
			</div>
			<div class="flex flex-col gap-2">
				@UsageTitle("/display/loadingOverlay.templ")
				<pre class={ DemoPreCodeClasses }>
					<code>
						{ `@uiDisplay.LoadingOverlay(uiDisplay.LoadingOverlaySettings{
	// OptionalFields
	IsLoadingOneWayStatePath: "isLoading",
	BackgroundColor:          "neutral-900/80",
	Icon:                     "ph-compass-rose",
	IconSize:                 uiDisplay.LoadingOverlayIconSizeMd,
	AnimationName:            uiDisplay.LoadingOverlayAnimationNameSpin,
	AnimationDurationSeconds: "2",
})` }
					</code>
				</pre>
			</div>
		</div>
		<div class="flex flex-col gap-4" x-data="{isLoading: false}">
			<h4 class="mb-2 text-lg font-bold">Live Example</h4>
			<div class="flex flex-col gap-4">
				<div class="flex flex-col gap-2">
					<h5 class="text-sm font-bold">Alpine.js Parent State <i>(x-data)</i></h5>
					<pre class={ DemoPreCodeClasses }>
						<code>{ `<div x-data="{isLoading: false}"></div>` }</code>
					</pre>
				</div>
				<div class="relative h-64 overflow-hidden rounded-md border border-neutral-800 bg-neutral-50/5">
					<div class="flex h-full flex-col items-center justify-center gap-4 p-8">
						<p class="text-center text-sm text-neutral-400">
							The page content will be covered by the loading overlay when triggered.
						</p>
						<div class="flex flex-wrap gap-2">
							@uiControl.Button(uiControl.ButtonSettings{
								Label:       "Trigger Loading (3s)",
								IconLeft:    "ph-play",
								OnClickFunc: "isLoading = true; setTimeout(() => isLoading = false, 3000)",
								Size:        uiControl.ButtonSizeSm,
							})
						</div>
					</div>
					@uiDisplay.LoadingOverlay(uiDisplay.LoadingOverlaySettings{
						IsLoadingOneWayStatePath: "isLoading",
						BackgroundColor:          "neutral-900/80",
						Icon:                     "ph-compass-rose",
						IconSize:                 uiDisplay.LoadingOverlayIconSizeMd,
						AnimationName:            uiDisplay.LoadingOverlayAnimationNameSpin,
						AnimationDurationSeconds: "2",
					})
				</div>
			</div>
		</div>
	</div>
}

templ CloakLoadingDemo() {
	<div class="flex flex-col gap-4">
		<div class="grid items-center gap-10 md:grid-cols-2">
			<div class="flex flex-col gap-2">
				<h3 class="text-xl font-bold">
					.CloakLoading <i class="text-sm text-neutral-500">(pre-Alpine/HTMX)</i>
				</h3>
				<p class="text-sm text-neutral-400">
					A cloak loading screen that appears only before the JavaScript libraries are loaded to prevent FOUC (Flash of Unstyled Content).
				</p>
			</div>
			<div class="flex flex-col gap-2">
				@UsageTitle("/display/cloakLoading.templ")
				<pre class={ DemoPreCodeClasses }>
					<code>
						{ `@uiDisplay.CloakLoading(uiDisplay.CloakLoadingSettings{
	// OptionalFields
	HideDelaySeconds:             "1",
	BackgroundColor:              "rgb(23, 23, 23)", // neutral-800
	TextMessage:                  "Loading...",
	TextColor:                    "rgb(250, 250, 250)", // neutral-50
	TextSize:                     uiDisplay.CloakLoadingTextSizeMd,
	Icon:                         "ph-compass-rose",
	IconSize:                     uiDisplay.CloakLoadingIconSizeLg,
	IconColor:                    "rgb(59, 130, 246)", // primary-400
	IconAnimationName:            uiDisplay.CloakLoadingAnimationNameSpin,
	IconAnimationDurationSeconds: "3",
})` }
					</code>
				</pre>
				<small>Keep in mind that the colors must be set as rgb(a), hex or hsl(a) values as they are used in the inline style.</small>
			</div>
		</div>
		<div class="flex flex-col gap-4">
			<h4 class="text-lg font-bold">Live Example</h4>
			<div class="flex flex-col gap-4">
				<div class="flex flex-col gap-2">
					<p class="text-sm text-neutral-400">
						Since the demo is already loaded with Alpine.js, the CloakLoading component will behave like a regular loading overlay.
						<br/>
						In a real application, this would be the first thing that appears when the page starts loading.
					</p>
				</div>
				<div class="relative h-64 overflow-hidden rounded-md border border-neutral-800 bg-neutral-50/5">
					<div class="flex h-full flex-col items-center justify-center gap-4 p-8">
						<p class="text-center text-sm text-neutral-400">
							The page content will be covered by the cloak loading screen when triggered.
						</p>
						<div class="flex flex-wrap gap-2" x-data="{ showCloak1: false, showCloak2: false, showCloak3: false }">
							<template x-if="showCloak1">
								@uiDisplay.CloakLoading(uiDisplay.CloakLoadingSettings{})
							</template>
							<template x-if="showCloak2">
								@uiDisplay.CloakLoading(uiDisplay.CloakLoadingSettings{
									HideDelaySeconds:             "2",
									BackgroundColor:              "rgb(30, 58, 138)", // primary-900
									TextMessage:                  "Please wait...",
									TextColor:                    "rgb(255, 255, 255)", // white
									TextSize:                     uiDisplay.CloakLoadingTextSizeLg,
									Icon:                         "ph-circle-notch",
									IconSize:                     uiDisplay.CloakLoadingIconSizeLg,
									IconColor:                    "rgb(255, 255, 255)", // white
									IconAnimationName:            uiDisplay.CloakLoadingAnimationNameSpin,
									IconAnimationDurationSeconds: "1",
								})
							</template>
							<template x-if="showCloak3">
								@uiDisplay.CloakLoading(uiDisplay.CloakLoadingSettings{
									HideDelaySeconds:             "2",
									BackgroundColor:              "rgb(6, 78, 59)", // emerald-900
									TextMessage:                  "Almost there...",
									TextColor:                    "rgb(236, 253, 245)", // emerald-50
									TextSize:                     uiDisplay.CloakLoadingTextSizeSm,
									Icon:                         "ph-hourglass",
									IconSize:                     uiDisplay.CloakLoadingIconSizeMd,
									IconColor:                    "rgb(110, 231, 183)", // emerald-300
									IconAnimationName:            uiDisplay.CloakLoadingAnimationNamePulse,
									IconAnimationDurationSeconds: "2",
								})
							</template>
							@uiControl.Button(uiControl.ButtonSettings{
								Label:       "Show Default",
								IconLeft:    "ph-compass-rose",
								OnClickFunc: "showCloak1 = true; showCloak2 = false; showCloak3 = false; setTimeout(() => showCloak1 = false, 2100)",
								Size:        uiControl.ButtonSizeSm,
							})
							@uiControl.Button(uiControl.ButtonSettings{
								Label:           "Show Primary",
								IconLeft:        "ph-circle-notch",
								OnClickFunc:     "showCloak2 = true; showCloak1 = false; showCloak3 = false; setTimeout(() => showCloak2 = false, 2100)",
								Size:            uiControl.ButtonSizeSm,
								BackgroundColor: "primary-600",
							})
							@uiControl.Button(uiControl.ButtonSettings{
								Label:           "Show Success",
								IconLeft:        "ph-hourglass",
								OnClickFunc:     "showCloak3 = true; showCloak1 = false; showCloak2 = false; setTimeout(() => showCloak3 = false, 2100)",
								Size:            uiControl.ButtonSizeSm,
								BackgroundColor: "emerald-600",
							})
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
}

templ ModalDemo() {
	<div class="flex flex-col gap-4">
		<div class="flex flex-row flex-wrap items-center gap-x-20 gap-y-10">
			<div class="flex flex-col gap-2">
				<h3 class="text-xl font-bold">.Modal</h3>
				<p class="text-sm text-neutral-400">
					A modal is a dialog box that appears on top of the main content to display additional information or request user input.
				</p>
			</div>
			<div class="flex flex-col gap-2">
				@UsageTitle("/display/modal.templ")
				<pre class={ DemoPreCodeClasses }>
					<code>
						{ `@uiDisplay.Modal(uiDisplay.ModalSettings{
	MiddleContent: ModalDemoContent(),

	// OptionalFields
	Title:                    "Modal Title",
	Size:                     uiDisplay.ModalSizeMd,
	IsVisibleTwoWayStatePath: "isModalVisible",
})` }
					</code>
				</pre>
			</div>
			<div class="flex flex-col gap-2">
				<h5 class="text-sm font-bold">Alpine.js Parent State <i>(x-data)</i></h5>
				<pre class={ DemoPreCodeClasses }>
					<code>
						{ `<div x-data="{
  isModalVisible: false,
  modalSize: 'md',
  modalTitle: 'Interactive Modal'
}"></div>` }
					</code>
				</pre>
			</div>
		</div>
		<div class="flex flex-col gap-4">
			<h4 class="mb-2 text-lg font-bold">Live Example</h4>
			<div
				class="flex flex-col gap-4"
				x-data="{
					isModalVisible: false,
					modalSize: 'md',
					modalTitle: 'Interactive Modal',
					isDarkModalVisible: false,
					isPrimaryModalVisible: false,
					isSecondaryModalVisible: false,
					isBlueBackdropModalVisible: false,
					isRedBackdropModalVisible: false,
					isPrimaryRingModalVisible: false,
					isEmeraldRingModalVisible: false,
					isRedRingModalVisible: false,
					isThinRingModalVisible: false,
					isSquareModalVisible: false,
					isSmallRadiusModalVisible: false,
					isLargeRadiusModalVisible: false,
					isXLRadiusModalVisible: false,
				}"
			>
				<div class="flex flex-row flex-wrap items-start gap-10">
					<div class="flex flex-col gap-2">
						<p class="text-sm text-neutral-400">Basic Modal</p>
						<div class="flex flex-wrap gap-2">
							@uiControl.Button(uiControl.ButtonSettings{
								Label:           "Show Modal",
								IconLeft:        "ph-squares-four",
								OnClickFunc:     "modalSize = 'md'; isModalVisible = true",
								Size:            uiControl.ButtonSizeSm,
								BackgroundColor: "primary-500",
							})
						</div>
					</div>
					<div class="flex flex-col gap-2">
						<p class="text-sm text-neutral-400">Different Sizes</p>
						<div class="flex flex-wrap gap-2">
							@uiControl.Button(uiControl.ButtonSettings{
								Label:           "XS",
								OnClickFunc:     "modalSize = 'xs'; isModalVisible = true",
								Size:            uiControl.ButtonSizeSm,
								BackgroundColor: "neutral-50/10",
							})
							@uiControl.Button(uiControl.ButtonSettings{
								Label:           "SM",
								OnClickFunc:     "modalSize = 'sm'; isModalVisible = true",
								Size:            uiControl.ButtonSizeSm,
								BackgroundColor: "neutral-50/10",
							})
							@uiControl.Button(uiControl.ButtonSettings{
								Label:           "LG",
								OnClickFunc:     "modalSize = 'lg'; isModalVisible = true",
								Size:            uiControl.ButtonSizeSm,
								BackgroundColor: "neutral-50/10",
							})
							@uiControl.Button(uiControl.ButtonSettings{
								Label:           "XL",
								OnClickFunc:     "modalSize = 'xl'; isModalVisible = true",
								Size:            uiControl.ButtonSizeSm,
								BackgroundColor: "neutral-50/10",
							})
							@uiControl.Button(uiControl.ButtonSettings{
								Label:           "Full",
								OnClickFunc:     "modalSize = 'full'; isModalVisible = true",
								Size:            uiControl.ButtonSizeSm,
								BackgroundColor: "neutral-50/10",
							})
						</div>
					</div>
					<div class="flex flex-col gap-2">
						<p class="text-sm text-neutral-400">Background Colors</p>
						<div class="flex flex-wrap gap-2">
							@uiControl.Button(uiControl.ButtonSettings{
								Label:           "Dark",
								OnClickFunc:     "isDarkModalVisible = true",
								Size:            uiControl.ButtonSizeSm,
								BackgroundColor: "neutral-800",
							})
							@uiControl.Button(uiControl.ButtonSettings{
								Label:           "Primary",
								OnClickFunc:     "isPrimaryModalVisible = true",
								Size:            uiControl.ButtonSizeSm,
								BackgroundColor: "primary-600",
							})
							@uiControl.Button(uiControl.ButtonSettings{
								Label:           "Secondary",
								OnClickFunc:     "isSecondaryModalVisible = true",
								Size:            uiControl.ButtonSizeSm,
								BackgroundColor: "secondary-600",
							})
						</div>
					</div>
					<div class="flex flex-col gap-2">
						<p class="text-sm text-neutral-400">Backdrop Colors</p>
						<div class="flex flex-wrap gap-2">
							@uiControl.Button(uiControl.ButtonSettings{
								Label:           "Dark",
								OnClickFunc:     "isModalVisible = true",
								Size:            uiControl.ButtonSizeSm,
								BackgroundColor: "neutral-700",
							})
							@uiControl.Button(uiControl.ButtonSettings{
								Label:           "Blue",
								OnClickFunc:     "isBlueBackdropModalVisible = true",
								Size:            uiControl.ButtonSizeSm,
								BackgroundColor: "blue-600",
							})
							@uiControl.Button(uiControl.ButtonSettings{
								Label:           "Red",
								OnClickFunc:     "isRedBackdropModalVisible = true",
								Size:            uiControl.ButtonSizeSm,
								BackgroundColor: "red-600",
							})
						</div>
					</div>
					<div class="flex flex-col gap-2">
						<p class="text-sm text-neutral-400">Ring Variations</p>
						<div class="flex flex-wrap gap-2">
							@uiControl.Button(uiControl.ButtonSettings{
								Label:           "Primary Ring",
								OnClickFunc:     "isPrimaryRingModalVisible = true",
								Size:            uiControl.ButtonSizeSm,
								BackgroundColor: "primary-600",
							})
							@uiControl.Button(uiControl.ButtonSettings{
								Label:           "Emerald Ring",
								OnClickFunc:     "isEmeraldRingModalVisible = true",
								Size:            uiControl.ButtonSizeSm,
								BackgroundColor: "emerald-600",
							})
							@uiControl.Button(uiControl.ButtonSettings{
								Label:           "Red Ring",
								OnClickFunc:     "isRedRingModalVisible = true",
								Size:            uiControl.ButtonSizeSm,
								BackgroundColor: "red-600",
							})
							@uiControl.Button(uiControl.ButtonSettings{
								Label:           "Thin Ring",
								OnClickFunc:     "isThinRingModalVisible = true",
								Size:            uiControl.ButtonSizeSm,
								BackgroundColor: "violet-600",
							})
						</div>
					</div>
					<div class="flex flex-col gap-2">
						<p class="text-sm text-neutral-400">Border Radius</p>
						<div class="flex flex-wrap gap-2">
							@uiControl.Button(uiControl.ButtonSettings{
								Label:           "Square",
								OnClickFunc:     "isSquareModalVisible = true",
								Size:            uiControl.ButtonSizeSm,
								BackgroundColor: "orange-600",
							})
							@uiControl.Button(uiControl.ButtonSettings{
								Label:           "Small",
								OnClickFunc:     "isSmallRadiusModalVisible = true",
								Size:            uiControl.ButtonSizeSm,
								BackgroundColor: "orange-600",
							})
							@uiControl.Button(uiControl.ButtonSettings{
								Label:           "Large",
								OnClickFunc:     "isLargeRadiusModalVisible = true",
								Size:            uiControl.ButtonSizeSm,
								BackgroundColor: "orange-600",
							})
							@uiControl.Button(uiControl.ButtonSettings{
								Label:           "Extra Large",
								OnClickFunc:     "isXLRadiusModalVisible = true",
								Size:            uiControl.ButtonSizeSm,
								BackgroundColor: "orange-600",
							})
						</div>
					</div>
				</div>
				<!-- Basic Modal -->
				@uiDisplay.Modal(uiDisplay.ModalSettings{
					MiddleContent:            ModalDemoContent(),
					TitleOneWayStatePath:     "modalTitle",
					SizeTwoWayStatePath:      "modalSize",
					IsVisibleTwoWayStatePath: "isModalVisible",
				})
				<!-- Background Color Variations -->
				@uiDisplay.Modal(uiDisplay.ModalSettings{
					MiddleContent:            ModalDemoContent(),
					Title:                    "Dark Background Modal",
					Size:                     uiDisplay.ModalSizeMd,
					BackgroundColor:          "neutral-900",
					IsVisibleTwoWayStatePath: "isDarkModalVisible",
				})
				@uiDisplay.Modal(uiDisplay.ModalSettings{
					MiddleContent:            ModalDemoContent(),
					Title:                    "Primary Background Modal",
					Size:                     uiDisplay.ModalSizeMd,
					BackgroundColor:          "primary-900",
					IsVisibleTwoWayStatePath: "isPrimaryModalVisible",
				})
				@uiDisplay.Modal(uiDisplay.ModalSettings{
					MiddleContent:            ModalDemoContent(),
					Title:                    "Secondary Background Modal",
					Size:                     uiDisplay.ModalSizeMd,
					BackgroundColor:          "secondary-900",
					IsVisibleTwoWayStatePath: "isSecondaryModalVisible",
				})
				<!-- Backdrop Color Variations -->
				@uiDisplay.Modal(uiDisplay.ModalSettings{
					MiddleContent:            ModalDemoContent(),
					Title:                    "Blue Backdrop Modal",
					Size:                     uiDisplay.ModalSizeXl,
					BackdropColor:            "blue-900/60",
					IsVisibleTwoWayStatePath: "isBlueBackdropModalVisible",
				})
				@uiDisplay.Modal(uiDisplay.ModalSettings{
					MiddleContent:            ModalDemoContent(),
					Title:                    "Red Backdrop Modal",
					Size:                     uiDisplay.ModalSizeMd,
					BackdropColor:            "red-900/70",
					IsVisibleTwoWayStatePath: "isRedBackdropModalVisible",
				})
				<!-- Ring Variations -->
				@uiDisplay.Modal(uiDisplay.ModalSettings{
					MiddleContent:            ModalDemoContent(),
					Title:                    "Primary Ring Modal",
					Size:                     uiDisplay.ModalSizeMd,
					RingColor:                "primary-500",
					RingThickness:            "md",
					IsVisibleTwoWayStatePath: "isPrimaryRingModalVisible",
				})
				@uiDisplay.Modal(uiDisplay.ModalSettings{
					MiddleContent:            ModalDemoContent(),
					Title:                    "Emerald Ring Modal",
					Size:                     uiDisplay.ModalSizeMd,
					RingColor:                "emerald-500",
					RingThickness:            "lg",
					IsVisibleTwoWayStatePath: "isEmeraldRingModalVisible",
				})
				@uiDisplay.Modal(uiDisplay.ModalSettings{
					MiddleContent:            ModalDemoContent(),
					Title:                    "Red Ring Modal",
					Size:                     uiDisplay.ModalSizeMd,
					RingColor:                "red-500",
					RingThickness:            "xl",
					IsVisibleTwoWayStatePath: "isRedRingModalVisible",
				})
				@uiDisplay.Modal(uiDisplay.ModalSettings{
					MiddleContent:            ModalDemoContent(),
					Title:                    "Thin Violet Ring Modal",
					Size:                     uiDisplay.ModalSizeMd,
					RingColor:                "violet-500",
					RingThickness:            "xs",
					IsVisibleTwoWayStatePath: "isThinRingModalVisible",
				})
				<!-- Border Radius Variations -->
				@uiDisplay.Modal(uiDisplay.ModalSettings{
					MiddleContent:            ModalDemoContent(),
					Title:                    "Square Modal",
					Size:                     uiDisplay.ModalSizeMd,
					BorderRadius:             "none",
					IsVisibleTwoWayStatePath: "isSquareModalVisible",
				})
				@uiDisplay.Modal(uiDisplay.ModalSettings{
					MiddleContent:            ModalDemoContent(),
					Title:                    "Small Radius Modal",
					Size:                     uiDisplay.ModalSizeMd,
					BorderRadius:             "sm",
					IsVisibleTwoWayStatePath: "isSmallRadiusModalVisible",
				})
				@uiDisplay.Modal(uiDisplay.ModalSettings{
					MiddleContent:            ModalDemoContent(),
					Title:                    "Large Radius Modal",
					Size:                     uiDisplay.ModalSizeMd,
					BorderRadius:             "lg",
					IsVisibleTwoWayStatePath: "isLargeRadiusModalVisible",
				})
				@uiDisplay.Modal(uiDisplay.ModalSettings{
					MiddleContent:            ModalDemoContent(),
					Title:                    "Extra Large Radius Modal",
					Size:                     uiDisplay.ModalSizeMd,
					BorderRadius:             "xl",
					IsVisibleTwoWayStatePath: "isXLRadiusModalVisible",
				})
			</div>
		</div>
	</div>
}

templ ModalDemoContent() {
	<div class="flex flex-col gap-4">
		<p class="text-neutral-300">
			This is the modal content area. You can put any content here including forms, images, or other components.
		</p>
		<div class="flex flex-col gap-2">
			<h4 class="text-base font-bold">Features:</h4>
			<ul class="list-inside list-disc space-y-1 text-sm text-neutral-400">
				<li>Click outside to close (when closeable)</li>
				<li>Use the close button in the header</li>
				<li>Resize using the + and - buttons</li>
				<li>Responsive design for different screen sizes</li>
			</ul>
		</div>
		<div class="flex flex-wrap gap-2">
			@uiControl.Button(uiControl.ButtonSettings{
				Label:           "Action Button",
				IconLeft:        "ph-check",
				Size:            uiControl.ButtonSizeSm,
				BackgroundColor: "emerald-500",
			})
			@uiControl.Button(uiControl.ButtonSettings{
				Label:           "Secondary Action",
				IconLeft:        "ph-info",
				Size:            uiControl.ButtonSizeSm,
				BackgroundColor: "neutral-50/10",
			})
		</div>
	</div>
}

templ AlertDemo() {
	<div class="flex flex-col gap-4">
		<div class="flex flex-row flex-wrap items-center gap-10">
			<div class="flex flex-col gap-2">
				<h3 class="text-xl font-bold">.Alert</h3>
				<p class="text-sm text-neutral-400">
					An alert is a notification component that displays important information to users.
				</p>
			</div>
			<div class="flex flex-col gap-2">
				@UsageTitle("/display/alert.templ")
				<pre class={ DemoPreCodeClasses }>
					<code>
						{ `@uiDisplay.Alert(uiDisplay.AlertSettings{
	// OptionalFields
	Title:       "Alert Title",
	Description: "This is an alert message.",
	Variation:   uiDisplay.AlertVariationInfo,
	Size:        uiDisplay.AlertSizeMd,
	IsCloseable: true,
})` }
					</code>
				</pre>
			</div>
		</div>
		<div class="flex flex-col gap-4">
			<h4 class="mb-2 text-lg font-bold">Live Example</h4>
			<div class="grid gap-10 md:grid-cols-2">
				<!-- Left Column -->
				<div class="flex flex-col gap-4">
					<div class="flex flex-col gap-2">
						<p class="text-sm text-neutral-400">Alert Variations</p>
						<div class="flex flex-col gap-3">
							@uiDisplay.Alert(uiDisplay.AlertSettings{
								Title:       "Success Alert",
								Description: "Your operation completed successfully!",
								Variation:   uiDisplay.AlertVariationSuccess,
								Size:        uiDisplay.AlertSizeMd,
								IsCloseable: true,
							})
							@uiDisplay.Alert(uiDisplay.AlertSettings{
								Title:       "Warning Alert",
								Description: "Please review your settings before proceeding.",
								Variation:   uiDisplay.AlertVariationWarning,
								Size:        uiDisplay.AlertSizeMd,
								IsCloseable: true,
							})
							@uiDisplay.Alert(uiDisplay.AlertSettings{
								Title:       "Error Alert",
								Description: "An error occurred while processing your request.",
								Variation:   uiDisplay.AlertVariationError,
								Size:        uiDisplay.AlertSizeMd,
								IsCloseable: true,
							})
							@uiDisplay.Alert(uiDisplay.AlertSettings{
								Title:       "Info Alert",
								Description: "Here's some helpful information for you.",
								Variation:   uiDisplay.AlertVariationInfo,
								Size:        uiDisplay.AlertSizeMd,
								IsCloseable: true,
							})
						</div>
					</div>
				</div>
				<!-- Right Column -->
				<div class="flex flex-col gap-4">
					<div class="flex flex-col gap-2">
						<p class="text-sm text-neutral-400">Flashy Customization Examples</p>
						<div class="flex flex-col gap-3">
							@uiDisplay.Alert(uiDisplay.AlertSettings{
								Title:                    "🌈 Rainbow Gradient Alert (SizeXs)",
								Description:              "This alert has a vibrant gradient background!",
								Size:                     uiDisplay.AlertSizeXs,
								BackgroundColor:          "gradient-to-r from-purple-500/20 via-pink-500/20 to-red-500/20",
								TextColor:                "white",
								IsCloseable:              true,
								CloseIconBackgroundColor: "red-500/20",
								CloseIconTextColor:       "white",
							})
							@uiDisplay.Alert(uiDisplay.AlertSettings{
								Title:                    "✨ Neon Glow Alert (SizeSm)",
								Description:              "This alert glows with neon colors!",
								Size:                     uiDisplay.AlertSizeSm,
								BackgroundColor:          "cyan-500/20",
								TextColor:                "cyan-100",
								RingThickness:            uiDisplay.AlertRingThicknessLg,
								RingColor:                "cyan-400",
								ShadowSize:               uiDisplay.AlertShadowSizeXl,
								IsCloseable:              true,
								CloseIconBackgroundColor: "cyan-500/30",
							})
							@uiDisplay.Alert(uiDisplay.AlertSettings{
								Title:                    "🔥 Fire Alert (SizeMd)",
								Description:              "This alert is on fire with hot colors!",
								Size:                     uiDisplay.AlertSizeMd,
								BackgroundColor:          "gradient-to-r from-orange-500/25 to-red-500/25",
								TextColor:                "orange-100",
								BorderRadius:             uiDisplay.AlertBorderRadiusMd,
								RingThickness:            uiDisplay.AlertRingThicknessMd,
								RingColor:                "orange-400",
								IsCloseable:              true,
								CloseIconBackgroundColor: "red-500/30",
							})
							@uiDisplay.Alert(uiDisplay.AlertSettings{
								Title:                    "💎 Diamond Luxury Alert (SizeLg)",
								Description:              "This alert sparkles with luxury!",
								Size:                     uiDisplay.AlertSizeLg,
								BackgroundColor:          "gradient-to-br from-violet-500/20 via-purple-500/20 to-blue-500/20",
								TextColor:                "violet-100",
								ShadowSize:               uiDisplay.AlertShadowSizeLg,
								RingThickness:            uiDisplay.AlertRingThicknessLg,
								RingColor:                "violet-400",
								IsCloseable:              true,
								CloseIconBackgroundColor: "violet-500/30",
								CloseIconTextColor:       "violet-100",
							})
						</div>
					</div>
				</div>
			</div>
			<!-- Alpine.js Integration Section -->
			<div class="flex flex-col gap-4" x-data="{alertMessage: 'Dynamic alert content!', isAlertCloseable: true}">
				<div class="flex flex-col gap-2">
					<p class="text-sm text-neutral-400">Alpine.js Integration</p>
					<div class="flex flex-col gap-2">
						<h5 class="text-sm font-bold">Alpine.js Parent State <i>(x-data)</i></h5>
						<pre class={ DemoPreCodeClasses }>
							<code>{ `<div x-data="{alertMessage: 'Dynamic alert content!', isAlertCloseable: true}"></div>` }</code>
						</pre>
					</div>
				</div>
				<div class="grid gap-6 md:grid-cols-2">
					<div class="flex flex-col gap-3">
						<p class="text-sm text-neutral-400">Dynamic Content</p>
						@uiDisplay.Alert(uiDisplay.AlertSettings{
							Title:                      "Dynamic Content Alert",
							DescriptionOneWayStatePath: "alertMessage",
							Variation:                  uiDisplay.AlertVariationInfo,
							Size:                       uiDisplay.AlertSizeMd,
							IsCloseable:                true,
						})
						<div class="flex gap-2">
							@uiControl.Button(uiControl.ButtonSettings{
								Label:       "Change Message",
								IconLeft:    "ph-pencil",
								OnClickFunc: "alertMessage = 'Message updated at ' + new Date().toLocaleTimeString()",
								Size:        uiControl.ButtonSizeSm,
							})
						</div>
					</div>
					<div class="flex flex-col gap-3">
						<p class="text-sm text-neutral-400">Dynamic Close Button</p>
						@uiDisplay.Alert(uiDisplay.AlertSettings{
							Title:                      "Conditional Close Button",
							Description:                "This alert's close button can be toggled!",
							Variation:                  uiDisplay.AlertVariationWarning,
							Size:                       uiDisplay.AlertSizeMd,
							IsCloseableOneWayStatePath: "isAlertCloseable",
							CloseIconBackgroundColor:   "yellow-500/20",
							CloseIconTextColor:         "yellow-100",
						})
						<div class="flex gap-2">
							@uiControl.Button(uiControl.ButtonSettings{
								Label:       "Toggle Close Button",
								IconLeft:    "ph-toggle-left",
								OnClickFunc: "isAlertCloseable = !isAlertCloseable",
								Size:        uiControl.ButtonSizeSm,
							})
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
}
