package uiForm

const (
	InputTypeColor    string = "color"
	InputTypeDate     string = "date"
	InputTypeEmail    string = "email"
	InputTypeHidden   string = "hidden"
	InputTypeMonth    string = "month"
	InputTypeNumber   string = "number"
	InputTypePassword string = "password"
	InputTypeTel      string = "tel"
	InputTypeText     string = "text"
	InputTypeTime     string = "time"
	InputTypeUrl      string = "url"

	InputTypeHintDisplayTooltip     string = "tooltip"
	InputTypeHintDisplayDescription string = "description"
)

type InputFieldSettings struct {
	InputType string
	InputName string
	Label     string

	// OptionalFields
	TwoWayStatePath                   string
	Value                             string
	AffixLeftValue                    string
	AffixLeftStatePath                string
	AffixRightValue                   string
	AffixRightStatePath               string
	InputId                           string
	InputNumberMin                    string
	InputNumberMax                    string
	InputNumberStep                   string
	IsRequired                        bool
	IsReadOnly                        bool
	HintValue                         string
	HintStatePath                     string
	HintDisplay                       string
	HintDisplayTooltipBackgroundColor string
}

templ InputField(componentSettings InputFieldSettings) {
	<!-- InputField HTML -->
	<div class="flex w-full flex-col">
		<fieldset class="bg-neutral-50/7.5 relative rounded border border-neutral-50/5 transition-colors autofill:bg-neutral-50/20 focus-within:border-neutral-50/30 hover:border-neutral-50/30">
			<legend
				class="ml-1 select-none px-1 text-xs font-bold text-neutral-50/80"
				if componentSettings.TwoWayStatePath != "" {
					:class={ `!` + componentSettings.TwoWayStatePath + ` && 'opacity-0 !p-0 w-0 h-0'` }
				}
			>
				{ componentSettings.Label }
				if componentSettings.IsRequired {
					<span class="text-red-700">*</span>
				}
			</legend>
			<div
				class="flex"
				if componentSettings.TwoWayStatePath != "" {
					:class={ `!` + componentSettings.TwoWayStatePath + ` && 'items-center'` }
				}
			>
				if componentSettings.AffixLeftValue != "" || componentSettings.AffixLeftStatePath != "" {
					<!-- LeftAffix -->
					<div
						class="shrink-0 rounded-l border-r border-neutral-50/5 bg-neutral-50/5 p-2 text-sm text-neutral-400"
						if componentSettings.TwoWayStatePath != "" {
							:class={ componentSettings.TwoWayStatePath + ` && '-mt-2'` }
						}
						if componentSettings.AffixLeftStatePath != "" {
							x-text={ componentSettings.AffixLeftStatePath }
						}
					>
						if componentSettings.AffixLeftValue != "" {
							{ componentSettings.AffixLeftValue }
						}
					</div>
				}
				{{ inputClasses := "w-full bg-transparent text-neutral-100 placeholder-text-neutral-50 placeholder-text-opacity-80 outline-none p-2 pt-0 text-sm peer" }}
				if componentSettings.IsReadOnly {
					{{ inputClasses += " text-neutral-400 cursor-not-allowed" }}
				}
				<input
					type={ componentSettings.InputType }
					if componentSettings.InputNumberMin != "" {
						min={ componentSettings.InputNumberMin }
					}
					if componentSettings.InputNumberMax != "" {
						max={ componentSettings.InputNumberMax }
					}
					if componentSettings.InputNumberStep != "" {
						step={ componentSettings.InputNumberStep }
					}
					if componentSettings.InputId != "" {
						id={ componentSettings.InputId }
					}
					if componentSettings.InputName != "" {
						name={ componentSettings.InputName }
					}
					if componentSettings.TwoWayStatePath != "" {
						x-model:value={ componentSettings.TwoWayStatePath }
					}
					if componentSettings.Value != "" {
						value={ componentSettings.Value }
					}
					autocomplete="off"
					if componentSettings.Label != "" {
						placeholder={ componentSettings.Label }
					}
					if componentSettings.IsRequired {
						required
					}
					class={ inputClasses }
					if componentSettings.TwoWayStatePath != "" {
						:class={ `!` + componentSettings.TwoWayStatePath + ` && 'pt-2'` }
					}
					if componentSettings.IsReadOnly {
						readonly
					}
				/>
				if componentSettings.AffixRightValue != "" || componentSettings.AffixRightStatePath != "" {
					<!-- RightAffix -->
					<div
						class="shrink-0 rounded-r border-l border-neutral-50/5 bg-neutral-50/5 p-2 text-sm text-neutral-400"
						if componentSettings.TwoWayStatePath != "" {
							:class={ componentSettings.TwoWayStatePath + ` && '-mt-2'` }
						}
						if componentSettings.AffixRightStatePath != "" {
							x-text={ componentSettings.AffixRightStatePath }
						}
					>
						if componentSettings.AffixRightValue != "" {
							{ componentSettings.AffixRightValue }
						}
					</div>
				}
				if componentSettings.HintDisplay == InputTypeHintDisplayTooltip && (componentSettings.HintValue != "" || componentSettings.HintStatePath != "") {
					<!-- HintDisplayTooltip -->
					<div class="group relative shrink-0 px-2">
						<i class="ph-bold ph-info text-sm text-neutral-400 transition-colors hover:text-neutral-100"></i>
						{{ initialTooltipBackgroundColor := "neutral-800/95" }}
						if componentSettings.HintDisplayTooltipBackgroundColor != "" {
							{{ initialTooltipBackgroundColor = componentSettings.HintDisplayTooltipBackgroundColor }}
						}
						<div
							class={ "invisible absolute flex right-0 z-10 mt-1.5 min-w-32 max-w-128 rounded border border-neutral-50/10 bg-" + initialTooltipBackgroundColor + " p-2 text-xs text-neutral-100 opacity-0 shadow-md transition-all group-hover:visible group-hover:opacity-100 select-none" }
							if componentSettings.HintStatePath != "" {
								x-text={ componentSettings.HintStatePath }
							}
						>
							if componentSettings.HintValue != "" {
								{ componentSettings.HintValue }
							}
						</div>
					</div>
				}
			</div>
		</fieldset>
		if componentSettings.HintDisplay == InputTypeHintDisplayDescription {
			<!-- HintDisplayDescription -->
			<div class="my-1 px-1 text-xs text-neutral-400">
				if componentSettings.HintValue != "" {
					{ componentSettings.HintValue }
				}
				if componentSettings.HintStatePath != "" {
					<span x-text={ componentSettings.HintStatePath }></span>
				}
			</div>
		}
	</div>
}
