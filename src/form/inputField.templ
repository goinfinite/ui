package uiForm

const (
	InputTypeColor    string = "color"
	InputTypeDate     string = "date"
	InputTypeEmail    string = "email"
	InputTypeHidden   string = "hidden"
	InputTypeMonth    string = "month"
	InputTypeNumber   string = "number"
	InputTypePassword string = "password"
	InputTypeTel      string = "tel"
	InputTypeText     string = "text"
	InputTypeTime     string = "time"
	InputTypeUrl      string = "url"
)

type InputFieldSettings struct {
	InputType string
	InputName string
	Label     string

	// OptionalFields
	InputId         string
	TwoWayStatePath string
	IsRequired      bool
	IsReadOnly      bool
}

templ InputField(componentSettings InputFieldSettings) {
	<!-- InputField HTML -->
	<fieldset class="bg-neutral-50/7.5 relative w-full rounded border border-neutral-50/5 transition-all autofill:bg-neutral-50/20 focus-within:border-neutral-50/30 hover:border-neutral-50/30">
		<legend
			class="ml-1 px-1 text-xs font-bold text-neutral-50/80 transition-opacity"
			if componentSettings.TwoWayStatePath != "" {
				:class={ `!` + componentSettings.TwoWayStatePath + ` && 'opacity-0 !p-0 w-0 h-3.5'` }
			}
		>
			{ componentSettings.Label }
			if componentSettings.IsRequired {
				<span class="text-red-700">*</span>
			}
		</legend>
		{{ inputClasses := "w-full bg-transparent text-neutral-100 placeholder-text-neutral-50 placeholder-text-opacity-80 outline-none px-2 pb-2 text-sm transition-all peer" }}
		if componentSettings.IsReadOnly {
			{{ inputClasses += " text-neutral-400 cursor-not-allowed" }}
		}
		<input
			type={ componentSettings.InputType }
			if componentSettings.InputId != "" {
				id={ componentSettings.InputId }
			}
			if componentSettings.InputName != "" {
				name={ componentSettings.InputName }
			}
			if componentSettings.TwoWayStatePath != "" {
				x-model:value={ componentSettings.TwoWayStatePath }
			}
			autocomplete="off"
			if componentSettings.Label != "" {
				placeholder={ componentSettings.Label }
			}
			if componentSettings.IsRequired {
				required
			}
			class={ inputClasses }
			if componentSettings.IsReadOnly {
				readonly
			}
		/>
		if componentSettings.IsReadOnly && componentSettings.TwoWayStatePath != "" {
			<div class="text-md absolute right-2 top-0 hidden flex-col gap-1 transition-all hover:flex active:flex peer-hover:flex">
				<i
					class="ph-bold ph-clipboard-text border-1 active:bg-secondary-500 cursor-pointer rounded border-neutral-50/5 bg-neutral-50/5 p-1 text-neutral-100 hover:border-neutral-50/30 hover:bg-neutral-50/20"
					@click.prevent={ "navigator.clipboard.writeText(" + componentSettings.TwoWayStatePath + ")" }
				></i>
			</div>
		}
	</fieldset>
}
