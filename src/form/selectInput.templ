package uiForm

const (
	SelectInputSizeXs string = "xs"
	SelectInputSizeSm string = "sm"
	SelectInputSizeMd string = "md"
	SelectInputSizeLg string = "lg"
	SelectInputSizeXl string = "xl"
)

type SelectLabelValueOption struct {
	Label     string          `json:"label"`
	LabelHtml templ.Component `json:"-"`
	Value     string          `json:"value"`
}

type SelectInputSettings struct {
	InputName string
	Label     string

	// OptionalFields
	FlatOptions              []string
	LabelValueOptions        []SelectLabelValueOption
	TwoWayStatePath          string
	OnChangeFunc             string
	Size                     string
	InputId                  string
	IsRequired               bool
	ShouldIncludeBlankOption bool
}

templ SelectInput(componentSettings SelectInputSettings) {
	<!-- SelectInput -->
	<div
		if componentSettings.TwoWayStatePath != "" {
			x-data={ "{isOpen: false, selectedValue: " + componentSettings.TwoWayStatePath + ", selectedLabel: " + componentSettings.TwoWayStatePath + " || '--'}" }
		} else {
			x-data="{isOpen: false, selectedValue: '', selectedLabel: '--'}"
		}
		if componentSettings.TwoWayStatePath != "" {
			x-init.debounce.300ms={ "$watch('selectedValue', (newValue, prevValue) => { if (newValue !== prevValue) { " + componentSettings.TwoWayStatePath + " = newValue; } })" }
		}
	>
		if componentSettings.InputName != "" && componentSettings.TwoWayStatePath != "" {
			<input
				type="hidden"
				if componentSettings.InputId != "" {
					id={ componentSettings.InputId }
				}
				if componentSettings.InputName != "" {
					name={ componentSettings.InputName }
				}
				if componentSettings.TwoWayStatePath != "" {
					x-model:value={ componentSettings.TwoWayStatePath }
				}
				if componentSettings.OnChangeFunc != "" {
					@change={ componentSettings.OnChangeFunc }
				}
			/>
		}
		{{ labelValueOptionsScriptId := componentSettings.InputName + "LabelValueOptions" }}
		if len(componentSettings.LabelValueOptions) > 0 {
			@templ.JSONScript(labelValueOptionsScriptId, componentSettings.LabelValueOptions)
		}
		<fieldset
			class="relative w-full rounded-md border border-neutral-50/10 bg-neutral-50/5 transition-all focus-within:border-neutral-50/40 hover:border-neutral-50/40"
		>
			<legend
				class="ml-1.5 px-1 text-xs font-bold text-neutral-50/80 transition-opacity"
				if componentSettings.TwoWayStatePath != "" {
					:class="(!selectedLabel && !selectedValue) && 'opacity-0 !p-0 w-0 h-3.5'"
				}
			>
				{ componentSettings.Label }
				if componentSettings.IsRequired {
					<span class="text-red-700">*</span>
				}
			</legend>
			<!-- SelectField -->
			<div
				class="flex w-full cursor-pointer items-center justify-between px-2 pb-2 text-sm text-neutral-100"
				@click="isOpen = !isOpen"
			>
				<div
					if len(componentSettings.LabelValueOptions) > 0 {
						x-init={ `JSON.parse(document.getElementById('` + labelValueOptionsScriptId + `').textContent).forEach(option => {if (option.value == selectedValue){selectedLabel = option.label}})` }
					}
					x-text="selectedLabel || selectedValue || '--'"
					class="w-full overflow-hidden text-ellipsis"
					:class="!selectedLabel && 'text-neutral-50/80'"
				>
					{ componentSettings.Label }
				</div>
				<div class="flex items-center gap-2">
					<!-- SelectDropdownIcon -->
					<i class="ph-bold ph-caret-down text-sm transition-transform" :class="isOpen ? 'rotate-180' : ''"></i>
					<!-- SelectClearIcon -->
					<i
						x-show="selectedValue !== ''"
						@click.prevent={ "selectedValue = ''; selectedLabel = '--'; isOpen = false" }
						class="ph-bold ph-x-circle text-lg"
					></i>
				</div>
			</div>
			<!-- SelectDropdown -->
			<ul
				class="absolute left-0 z-10 mt-1 max-h-60 w-full overflow-auto rounded-md border border-neutral-50/10 bg-neutral-800/95 shadow-lg hover:border-neutral-50/40"
				x-show="isOpen"
				@click.away="isOpen = false"
				x-transition
			>
				{{ dropdownClasses := "cursor-pointer px-3 py-2 transition-colors hover:bg-neutral-50/10 border-neutral-50/5 border-t first:border-t-0" }}
				{{ dropdownSelectedClasses := "bg-neutral-50/5 border-y !border-neutral-50/10" }}
				if componentSettings.ShouldIncludeBlankOption {
					<li
						class={ dropdownClasses }
						@click="selectedValue = ''; selectedLabel = '--'; isOpen = false"
					>
						--
					</li>
				}
				for _, option := range componentSettings.FlatOptions {
					<li
						class={ dropdownClasses }
						@click={ "selectedValue = '" + option + "'; selectedLabel = '" + option + "'; isOpen = false" }
						:class={ "selectedValue === '" + option + "' ? '" + dropdownSelectedClasses + "' : ''" }
					>
						{ option }
					</li>
				}
				for _, option := range componentSettings.LabelValueOptions {
					<li
						class={ dropdownClasses }
						@click={ "selectedValue = '" + option.Value + "'; selectedLabel = '" + option.Label + "'; isOpen = false" }
						:class={ "selectedValue === '" + option.Value + "' ? '" + dropdownSelectedClasses + "' : ''" }
					>
						if option.LabelHtml != nil {
							@option.LabelHtml
						} else {
							{ option.Label }
						}
					</li>
				}
			</ul>
		</fieldset>
	</div>
}
