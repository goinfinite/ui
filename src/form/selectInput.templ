package uiForm

const (
	SelectInputSizeXs string = "xs"
	SelectInputSizeSm string = "sm"
	SelectInputSizeMd string = "md"
	SelectInputSizeLg string = "lg"
	SelectInputSizeXl string = "xl"
)

type SelectLabelValueOption struct {
	Label     string          `json:"label"`
	LabelHtml templ.Component `json:"-"`
	Value     string          `json:"value"`
}

type SelectInputSettings struct {
	InputName string
	Label     string

	// OptionalFields
	FlatOptions              []string
	LabelValueOptions        []SelectLabelValueOption
	TwoWayStatePath          string
	OnChangeFunc             string
	Size                     string
	DropdownBackgroundColor  string
	InputId                  string
	IsRequired               bool
	ShouldIncludeBlankOption bool
}

templ SelectInput(componentSettings SelectInputSettings) {
	{{ selectState := `{isOpen: false, selectedValue: ''}` }}
	{{ selectValueStatePath := "selectedValue" }}
	if componentSettings.TwoWayStatePath != "" {
		{{ selectState = "{isOpen: false}" }}
		{{ selectValueStatePath = componentSettings.TwoWayStatePath }}
	}
	<!-- SelectInput -->
	{{ labelValueOptionsScriptId := componentSettings.InputName + "LabelValueOptions" }}
	if len(componentSettings.LabelValueOptions) > 0 {
		@templ.JSONScript(labelValueOptionsScriptId, componentSettings.LabelValueOptions)
	}
	<div x-data={ selectState }>
		if componentSettings.InputName != "" {
			<input
				type="hidden"
				if componentSettings.InputId != "" {
					id={ componentSettings.InputId }
				}
				if componentSettings.InputName != "" {
					name={ componentSettings.InputName }
				}
				x-model:value={ selectValueStatePath }
				if componentSettings.OnChangeFunc != "" {
					@change={ componentSettings.OnChangeFunc }
				}
			/>
		}
		<fieldset
			class="bg-neutral-50/7.5 relative w-full rounded border border-neutral-50/5 transition-all focus-within:border-neutral-50/30 hover:border-neutral-50/30"
		>
			<legend
				class="ml-1 select-none px-1 text-xs font-bold text-neutral-50/80 transition-opacity"
			>
				{ componentSettings.Label }
				if componentSettings.IsRequired {
					<span class="text-red-700">*</span>
				}
			</legend>
			<!-- SelectField -->
			<div
				class="group flex w-full cursor-pointer items-center justify-between px-2 pb-2 text-sm text-neutral-100"
				@click="isOpen = !isOpen"
			>
				{{ selectedLabelText := selectValueStatePath }}
				if len(componentSettings.LabelValueOptions) > 0 {
					{{ selectedLabelText = `JSON.parse(document.getElementById('` + labelValueOptionsScriptId + `').textContent).find(option => option.value == ` + selectValueStatePath + `)?.label` }}
				}
				<div
					x-text={ selectedLabelText + " || '--'" }
					class="w-full overflow-hidden text-ellipsis"
				></div>
				<div class="flex items-center gap-1.5 text-neutral-100/60">
					<!-- SelectDropdownIcon -->
					<i class="ph-bold ph-caret-down pt-0.5 text-sm transition-transform hover:text-neutral-300 group-focus-within:text-neutral-300 group-hover:text-neutral-300" :class="isOpen ? 'rotate-180' : ''"></i>
					if componentSettings.ShouldIncludeBlankOption {
						<!-- SelectClearIcon -->
						<i
							x-show={ selectValueStatePath + " !== ''" }
							@click.prevent={ selectValueStatePath + " = ''; isOpen = false" }
							class="ph-bold ph-x-circle text-lg hover:text-neutral-300"
						></i>
					}
				</div>
			</div>
			<!-- SelectDropdown -->
			{{ initialDropdownBackgroundColor := "neutral-800/95" }}
			if componentSettings.DropdownBackgroundColor != "" {
				{{ initialDropdownBackgroundColor = componentSettings.DropdownBackgroundColor }}
			}
			<ul
				class={ "absolute left-0 z-10 mt-1 max-h-60 w-full overflow-auto rounded-md border border-neutral-50/5 bg-" + initialDropdownBackgroundColor + " shadow-lg hover:border-neutral-50/30" }
				x-show="isOpen"
				@click.away="isOpen = false"
				x-transition
			>
				{{ dropdownClasses := "cursor-pointer px-3 py-2 transition-colors hover:bg-neutral-50/5 border-neutral-50/5 border-t first:border-t-0" }}
				{{ dropdownSelectedClasses := "bg-neutral-50/10 border-y !border-neutral-50/10" }}
				if componentSettings.ShouldIncludeBlankOption {
					<li class={ dropdownClasses } @click={ selectValueStatePath + " = ''; isOpen = false" }>--</li>
				}
				for _, option := range componentSettings.FlatOptions {
					<li
						class={ dropdownClasses }
						@click={ selectValueStatePath + " = '" + option + "'; isOpen = false" }
						:class={ selectValueStatePath + " === '" + option + "' && '" + dropdownSelectedClasses + "'" }
					>
						{ option }
					</li>
				}
				for _, option := range componentSettings.LabelValueOptions {
					<li
						class={ dropdownClasses }
						@click={ selectValueStatePath + " = '" + option.Value + "'; isOpen = false" }
						:class={ selectValueStatePath + " === '" + option.Value + "' && '" + dropdownSelectedClasses + "'" }
					>
						if option.LabelHtml != nil {
							@option.LabelHtml
						} else {
							{ option.Label }
						}
					</li>
				}
			</ul>
		</fieldset>
	</div>
}
