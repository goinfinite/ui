// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.857
package uiControl

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

const (
	ButtonSizeXs string = "xs"
	ButtonSizeSm string = "sm"
	ButtonSizeMd string = "md"
	ButtonSizeLg string = "lg"
	ButtonSizeXl string = "xl"

	ButtonShapeCircular string = "circular"
	ButtonShapeRounded  string = "rounded"
	ButtonShapeSquare   string = "square"

	ButtonTooltipPositionTop    string = "top"
	ButtonTooltipPositionBottom string = "bottom"
	ButtonTooltipPositionLeft   string = "left"
	ButtonTooltipPositionRight  string = "right"

	ButtonRingThicknessXs string = "xs"
	ButtonRingThicknessSm string = "sm"
	ButtonRingThicknessMd string = "md"
	ButtonRingThicknessLg string = "lg"
	ButtonRingThicknessXl string = "xl"
)

type ButtonSettings struct {
	// OptionalFields
	Label                         string
	BackgroundColor               string
	BackgroundColorHover          string
	IconLeft                      string
	IconRight                     string
	Id                            string
	IsDisabled                    bool
	IsDisabledOneWayStatePath     string
	IsFullWidth                   bool
	IsSubmit                      bool
	OnClickFunc                   string
	Shape                         string
	Size                          string
	TextColor                     string
	TextColorHover                string
	TooltipContent                string
	TooltipContentHtml            templ.Component
	TooltipContentOneWayStatePath string
	TooltipBackgroundColor        string
	TooltipPosition               string
	TooltipRingColor              string
	TooltipRingThickness          string
	TooltipTextColor              string
	RingColor                     string
	RingColorHover                string
	RingThickness                 string
}

func Button(componentSettings ButtonSettings) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<!-- Button -->")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		buttonWidth := "w-fit"
		if componentSettings.IsFullWidth {
			buttonWidth = "w-full"
		}
		var templ_7745c5c3_Var2 = []any{"group relative " + buttonWidth}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var2...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<div class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var3 string
		templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var2).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/control/button.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		backgroundColor := "bg-neutral-50/7.5"
		if componentSettings.BackgroundColor != "" {
			backgroundColor = "bg-" + componentSettings.BackgroundColor
		}
		backgroundHoverColor := "hover:bg-neutral-50/10"
		if componentSettings.BackgroundColorHover != "" {
			backgroundHoverColor = "hover:bg-" + componentSettings.BackgroundColorHover
		}
		backgroundSize := "p-2 text-base gap-1"
		switch componentSettings.Size {
		case ButtonSizeXs:
			backgroundSize = "p-1 text-xs gap-0.5"
		case ButtonSizeSm:
			backgroundSize = "p-1.5 text-sm gap-0.75"
		case ButtonSizeMd:
			backgroundSize = "p-2 text-base gap-1"
		case ButtonSizeLg:
			backgroundSize = "p-2.5 text-lg gap-1.25"
		case ButtonSizeXl:
			backgroundSize = "p-3 text-xl gap-1.5"
		}
		backgroundClasses := backgroundColor + " " + backgroundHoverColor + " " + backgroundSize
		textColor := "text-neutral-50"
		if componentSettings.TextColor != "" {
			textColor = "text-" + componentSettings.TextColor
		}
		textColorHover := "hover:text-neutral-50"
		if componentSettings.TextColorHover != "" {
			textColorHover = "hover:text-" + componentSettings.TextColorHover
		}
		ringClasses := ""
		ringThickness := "ring-1.5"
		if componentSettings.RingThickness != "" {
			switch componentSettings.RingThickness {
			case ButtonRingThicknessXs:
				ringThickness = "ring-1"
			case ButtonRingThicknessSm:
				ringThickness = "ring-1.5"
			case ButtonRingThicknessMd:
				ringThickness = "ring-2"
			case ButtonRingThicknessLg:
				ringThickness = "ring-2.5"
			case ButtonRingThicknessXl:
				ringThickness = "ring-3"
			}
		}
		if componentSettings.RingColor != "" {
			ringClasses = ringThickness + " ring-" + componentSettings.RingColor
		}
		if componentSettings.RingColorHover != "" {
			ringClasses += " hover:ring-" + componentSettings.RingColorHover
		}
		radiusRoundness := "rounded"
		switch componentSettings.Shape {
		case ButtonShapeCircular:
			radiusRoundness = "rounded-full"
		case ButtonShapeRounded:
			radiusRoundness = "rounded"
		case ButtonShapeSquare:
			radiusRoundness = "rounded-none"
		}
		iconSize := "text-xl"
		switch componentSettings.Size {
		case ButtonSizeXs:
			iconSize = "text-md"
		case ButtonSizeSm:
			iconSize = "text-lg"
		case ButtonSizeMd:
			iconSize = "text-xl"
		case ButtonSizeLg:
			iconSize = "text-2xl"
		case ButtonSizeXl:
			iconSize = "text-3xl"
		}
		buttonClasses := buttonWidth + " " + backgroundClasses + " " + textColor + " " + textColorHover + " " + radiusRoundness + " " + ringClasses + " justify-center text-center font-bold flex flex-row items-center leading-none transition-all"
		disabledClasses := "opacity-50 cursor-not-allowed pointer-events-none"
		if componentSettings.IsDisabled {
			buttonClasses += " " + disabledClasses
		}
		var templ_7745c5c3_Var4 = []any{buttonClasses}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var4...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "<button")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if componentSettings.Id != "" {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, " id=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var5 string
			templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(componentSettings.Id)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/control/button.templ`, Line: 144, Col: 29}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		if componentSettings.IsSubmit {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, " type=\"submit\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		if componentSettings.OnClickFunc != "" && !componentSettings.IsDisabled {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, " @click=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var6 string
			templ_7745c5c3_Var6, templ_7745c5c3_Err = templ.JoinStringErrs(componentSettings.OnClickFunc)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/control/button.templ`, Line: 150, Col: 42}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var6))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, "\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		if componentSettings.IsDisabled {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 10, " disabled")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		if componentSettings.IsDisabledOneWayStatePath != "" {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 11, " :disabled=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var7 string
			templ_7745c5c3_Var7, templ_7745c5c3_Err = templ.JoinStringErrs(componentSettings.IsDisabledOneWayStatePath)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/control/button.templ`, Line: 156, Col: 59}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var7))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 12, "\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 13, " class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var8 string
		templ_7745c5c3_Var8, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var4).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/control/button.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var8))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 14, "\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if componentSettings.IsDisabledOneWayStatePath != "" {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 15, " :class=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var9 string
			templ_7745c5c3_Var9, templ_7745c5c3_Err = templ.JoinStringErrs(componentSettings.IsDisabledOneWayStatePath + " && '" + disabledClasses + "'")
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/control/button.templ`, Line: 160, Col: 90}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var9))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 16, "\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 17, ">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if componentSettings.IconLeft != "" {
			var templ_7745c5c3_Var10 = []any{"ph-bold " + componentSettings.IconLeft + " " + iconSize}
			templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var10...)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 18, "<i class=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var11 string
			templ_7745c5c3_Var11, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var10).String())
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/control/button.templ`, Line: 1, Col: 0}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var11))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 19, "\"></i> ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		if componentSettings.Label != "" {
			var templ_7745c5c3_Var12 string
			templ_7745c5c3_Var12, templ_7745c5c3_Err = templ.JoinStringErrs(componentSettings.Label)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/control/button.templ`, Line: 167, Col: 29}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var12))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 20, " ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		if componentSettings.IconRight != "" {
			var templ_7745c5c3_Var13 = []any{"ph-bold " + componentSettings.IconRight + " " + iconSize}
			templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var13...)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 21, "<i class=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var14 string
			templ_7745c5c3_Var14, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var13).String())
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/control/button.templ`, Line: 1, Col: 0}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var14))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 22, "\"></i>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 23, "</button> ")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if componentSettings.TooltipContent != "" || componentSettings.TooltipContentHtml != nil || componentSettings.TooltipContentOneWayStatePath != "" {
			tooltipBackgroundColor := "neutral-800/95"
			if componentSettings.TooltipBackgroundColor != "" {
				tooltipBackgroundColor = componentSettings.TooltipBackgroundColor
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 24, " ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			tooltipTextColor := "neutral-50"
			if componentSettings.TooltipTextColor != "" {
				tooltipTextColor = componentSettings.TooltipTextColor
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 25, " ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			tooltipRingClasses := ""
			if componentSettings.TooltipRingColor != "" {
				tooltipRingThickness := "ring-1"
				if componentSettings.TooltipRingThickness != "" {
					switch componentSettings.TooltipRingThickness {
					case ButtonRingThicknessXs:
						tooltipRingThickness = "ring-0.5"
					case ButtonRingThicknessSm:
						tooltipRingThickness = "ring-1"
					case ButtonRingThicknessMd:
						tooltipRingThickness = "ring-1.5"
					case ButtonRingThicknessLg:
						tooltipRingThickness = "ring-2"
					case ButtonRingThicknessXl:
						tooltipRingThickness = "ring-2.5"
					}
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 26, " ")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				tooltipRingClasses = tooltipRingThickness + " ring-" + componentSettings.TooltipRingColor
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 27, " ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			tooltipBaseClass := "absolute invisible z-10 transition-all duration-300 group-hover:visible opacity-0 group-hover:opacity-100 transform w-fit p-1.5 bg-" + tooltipBackgroundColor + " text-" + tooltipTextColor + " text-xs rounded-md shadow-md " + tooltipRingClasses
			tooltipPosition := ButtonTooltipPositionTop
			if componentSettings.TooltipPosition != "" {
				tooltipPosition = componentSettings.TooltipPosition
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 28, " ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			switch tooltipPosition {
			case ButtonTooltipPositionTop:
				tooltipBaseClass += " bottom-full mb-1.5 group-hover:-translate-y-0.5 left-1/2 -translate-x-1/2"
			case ButtonTooltipPositionBottom:
				tooltipBaseClass += " top-full mt-1.5 group-hover:translate-y-0.5 left-1/2 -translate-x-1/2"
			case ButtonTooltipPositionLeft:
				tooltipBaseClass += " right-full mr-1.5 group-hover:-translate-x-0.5 top-1/2 -translate-y-1/2"
			case ButtonTooltipPositionRight:
				tooltipBaseClass += " left-full ml-1.5 group-hover:translate-x-0.5 top-1/2 -translate-y-1/2"
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 29, " ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var15 = []any{tooltipBaseClass}
			templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var15...)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 30, "<div class=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var16 string
			templ_7745c5c3_Var16, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var15).String())
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/control/button.templ`, Line: 1, Col: 0}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var16))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 31, "\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if componentSettings.TooltipContentOneWayStatePath != "" {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 32, " x-text=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var17 string
				templ_7745c5c3_Var17, templ_7745c5c3_Err = templ.JoinStringErrs(componentSettings.TooltipContentOneWayStatePath)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/control/button.templ`, Line: 219, Col: 61}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var17))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 33, "\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 34, ">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if componentSettings.TooltipContent != "" {
				var templ_7745c5c3_Var18 string
				templ_7745c5c3_Var18, templ_7745c5c3_Err = templ.JoinStringErrs(componentSettings.TooltipContent)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/control/button.templ`, Line: 223, Col: 39}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var18))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 35, " ")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			if componentSettings.TooltipContentHtml != nil {
				templ_7745c5c3_Err = componentSettings.TooltipContentHtml.Render(ctx, templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 36, "</div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 37, "</div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
