// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.898
package uiDisplay

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	_ "embed"
	"github.com/goinfinite/ui/src/toolset"
)

const (
	ToastSizeXs string = "xs"
	ToastSizeSm string = "sm"
	ToastSizeMd string = "md"
	ToastSizeLg string = "lg"

	ToastRingThicknessXs string = "xs"
	ToastRingThicknessSm string = "sm"
	ToastRingThicknessMd string = "md"
	ToastRingThicknessLg string = "lg"
	ToastRingThicknessXl string = "xl"

	ToastRadiusNone string = "none"
	ToastRadiusXs   string = "xs"
	ToastRadiusSm   string = "sm"
	ToastRadiusMd   string = "md"
	ToastRadiusLg   string = "lg"
	ToastRadiusXl   string = "xl"
	ToastRadiusFull string = "full"
)

//go:embed toastState.js
var toastAlpineState string

type ToastSettings struct {
	// OptionalFields
	BackgroundColor string
	TextColor       string
	Size            string
	RingThickness   string
	RingColor       string
	Radius          string
}

func Toast(componentSettings ToastSettings) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<!-- Toast JavaScript -->")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = uiToolset.MinifierTemplateJs(&toastAlpineState).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<!-- Toast HTML -->")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		toastClasses := "fixed bottom-5 right-10 flex w-fit flex-row items-center justify-stretch shadow-md z-100"
		toastIconSizeClasses := "text-2xl"
		if componentSettings.Size == "" {
			componentSettings.Size = ToastSizeMd
		}
		switch componentSettings.Size {
		case ToastSizeXs:
			toastClasses += " p-1 text-xs gap-1.5"
			toastIconSizeClasses = "text-lg"
		case ToastSizeSm:
			toastClasses += " p-1.5 text-sm gap-2"
			toastIconSizeClasses = "text-xl"
		case ToastSizeMd:
			toastClasses += " p-2 text-base gap-2.5"
			toastIconSizeClasses = "text-2xl"
		case ToastSizeLg:
			toastClasses += " p-2.5 text-lg gap-3"
			toastIconSizeClasses = "text-3xl"
		}
		toastRingThickness := "ring-0"
		if componentSettings.RingThickness != "" {
			switch componentSettings.RingThickness {
			case ToastRingThicknessXs:
				toastRingThickness = "ring-1"
			case ToastRingThicknessSm:
				toastRingThickness = "ring-1.5"
			case ToastRingThicknessMd:
				toastRingThickness = "ring-2"
			case ToastRingThicknessLg:
				toastRingThickness = "ring-2.5"
			case ToastRingThicknessXl:
				toastRingThickness = "ring-3"
			}
		}
		toastRingColor := ""
		if componentSettings.RingColor != "" {
			toastRingColor = " ring-" + componentSettings.RingColor
		}
		toastRadius := "rounded"
		switch componentSettings.Radius {
		case ToastRadiusNone:
			toastRadius = "rounded-none"
		case ToastRadiusXs:
			toastRadius = "rounded-xs"
		case ToastRadiusSm:
			toastRadius = "rounded-sm"
		case ToastRadiusMd:
			toastRadius = "rounded-md"
		case ToastRadiusLg:
			toastRadius = "rounded-lg"
		case ToastRadiusXl:
			toastRadius = "rounded-xl"
		case ToastRadiusFull:
			toastRadius = "rounded-full"
		}
		toastClasses += " " + toastRingThickness + toastRingColor + " " + toastRadius
		toastBackgroundColor := "primary-300"
		if componentSettings.BackgroundColor != "" {
			toastBackgroundColor = componentSettings.BackgroundColor
		}
		toastClasses += " bg-" + toastBackgroundColor
		toastTextColor := "text-neutral-50"
		if componentSettings.TextColor != "" {
			toastTextColor = "text-" + componentSettings.TextColor
		}
		toastClasses += " " + toastTextColor
		var templ_7745c5c3_Var2 = []any{toastClasses}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var2...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "<div id=\"toast\" class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var3 string
		templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var2).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/display/toast.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "\" x-data x-show=\"$store.toast.toastVisible\" x-transition x-cloak un-cloak role=\"alert\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		toastIconClasses := "ph-duotone rounded p-2 " + toastIconSizeClasses
		var templ_7745c5c3_Var4 = []any{"ph-seal-check bg-green-800 " + toastIconClasses}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var4...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "<i x-show=\"$store.toast.toastType == 'success'\" class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var5 string
		templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var4).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/display/toast.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "\"></i> ")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var6 = []any{"ph-seal-warning bg-yellow-800 " + toastIconClasses}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var6...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, "<i x-show=\"$store.toast.toastType == 'partialSuccess'\" class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var7 string
		templ_7745c5c3_Var7, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var6).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/display/toast.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var7))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "\"></i> ")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var8 = []any{"ph-warning-octagon bg-red-800 " + toastIconClasses}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var8...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, "<i x-show=\"$store.toast.toastType == 'danger'\" class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var9 string
		templ_7745c5c3_Var9, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var8).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/display/toast.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var9))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 10, "\"></i><div x-text=\"$store.toast.toastMessage\"></div><i @click=\"$store.toast.clearToast()\" class=\"ph-bold ph-x cursor-pointer rounded p-1 text-xs hover:opacity-75\"></i></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
