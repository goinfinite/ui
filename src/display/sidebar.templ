package uiDisplay

const (
	SidebarSideLeft  string = "left"
	SidebarSideRight string = "right"

	SidebarAttachmentModeInline string = "inline"
	SidebarAttachmentModeFixed  string = "fixed"
)

type SidebarSettings struct {
	MiddleContent templ.Component

	// OptionalFields
	HeaderContent                 templ.Component
	FooterContent                 templ.Component
	Width                         string
	BackgroundColor               string
	IsVisibleTwoWayStatePath      string
	IsCollapsed                   bool
	IsCollapsedTwoWayStatePath    string
	AttachmentMode                string
	AttachmentModeTwoWayStatePath string
	Side                          string
	SideTwoWayStatePath           string
	IsOffCanvas                   bool
	IsOffCanvasTwoWayStatePath    string
}

templ Sidebar(componentSettings SidebarSettings) {
	<!-- Sidebar -->
	// SidebarCssClasses
	{{ sidebarClasses := "h-full flex flex-col transition-all duration-200 ease-linear relative" }}
	// - SidebarWidth
	{{ sidebarWidthClass := "w-64" }}
	if componentSettings.Width != "" {
		{{ sidebarWidthClass = componentSettings.Width }}
	}
	{{ sidebarClasses += " " + sidebarWidthClass }}
	// - SidebarBackgroundColor
	{{ sidebarBackgroundColorClass := "bg-neutral-50/5" }}
	if componentSettings.BackgroundColor != "" {
		{{ sidebarBackgroundColorClass = componentSettings.BackgroundColor }}
	}
	{{ sidebarClasses += " " + sidebarBackgroundColorClass }}
	// - SidebarAttachmentMode
	{{ sidebarAttachmentMode := SidebarAttachmentModeInline }}
	if componentSettings.AttachmentMode != "" {
		{{ sidebarAttachmentMode = componentSettings.AttachmentMode }}
	}
	if sidebarAttachmentMode == SidebarAttachmentModeFixed {
		{{ sidebarClasses += " !fixed top-0" }}
	}
	// - SidebarOffCanvas
	if componentSettings.IsOffCanvas {
		{{ sidebarClasses += " !absolute top-0 z-50" }}
	}
	// - SidebarSide
	switch componentSettings.Side {
		case SidebarSideLeft:
			{{ sidebarClasses += " left-0" }}
			if sidebarAttachmentMode == SidebarAttachmentModeInline {
				{{ sidebarClasses += " float-left" }}
			}
		case SidebarSideRight:
			{{ sidebarClasses += " right-0" }}
			if sidebarAttachmentMode == SidebarAttachmentModeInline {
				{{ sidebarClasses += " float-right" }}
			}
	}
	if componentSettings.IsCollapsed {
		{{ sidebarClasses += " !w-16" }}
	}
	// SidebarDynamicCssClasses
	{{ sidebarDynamicClasses := "{" }}
	if componentSettings.IsVisibleTwoWayStatePath != "" {
		{{ sidebarDynamicClasses += "'invisible': !" + componentSettings.IsVisibleTwoWayStatePath + "," }}
	}
	if componentSettings.IsCollapsedTwoWayStatePath != "" {
		{{ sidebarDynamicClasses += "'!w-16': " + componentSettings.IsCollapsedTwoWayStatePath + "," }}
	}
	if componentSettings.AttachmentModeTwoWayStatePath != "" {
		{{ sidebarDynamicClasses += "'!fixed top-0': " + componentSettings.AttachmentModeTwoWayStatePath + " === '" + SidebarAttachmentModeFixed + "'," }}
	}
	if componentSettings.IsOffCanvasTwoWayStatePath != "" {
		{{ sidebarDynamicClasses += "'!absolute top-0 z-50': " + componentSettings.IsOffCanvasTwoWayStatePath + "," }}
	}
	if componentSettings.SideTwoWayStatePath != "" {
		{{ sidebarDynamicClasses += "'left-0': " + componentSettings.SideTwoWayStatePath + " === '" + SidebarSideLeft + "'," }}
		{{ sidebarDynamicClasses += "'right-0': " + componentSettings.SideTwoWayStatePath + " === '" + SidebarSideRight + "'," }}
		{{ sidebarDynamicClasses += "'float-left': " + componentSettings.SideTwoWayStatePath + " === '" + SidebarSideLeft + "' && " + componentSettings.AttachmentModeTwoWayStatePath + " === '" + SidebarAttachmentModeInline + "'," }}
		{{ sidebarDynamicClasses += "'float-right': " + componentSettings.SideTwoWayStatePath + " === '" + SidebarSideRight + "' && " + componentSettings.AttachmentModeTwoWayStatePath + " === '" + SidebarAttachmentModeInline + "'," }}
	}
	{{ sidebarDynamicClasses += "}" }}
	<aside class={ sidebarClasses } :class={ sidebarDynamicClasses }>
		<!-- SidebarHeaderContent -->
		if componentSettings.HeaderContent != nil {
			<div class="flex border-b border-neutral-50/5">
				@componentSettings.HeaderContent
			</div>
		}
		<!-- SidebarMiddleContent -->
		<div
			class="relative grow overflow-y-auto overflow-x-hidden [&::-webkit-scrollbar-thumb]:rounded-full [&::-webkit-scrollbar-thumb]:bg-neutral-50/30 [&::-webkit-scrollbar-thumb]:hover:bg-neutral-50/50 [&::-webkit-scrollbar-track]:rounded-full [&::-webkit-scrollbar-track]:bg-neutral-50/10 [&::-webkit-scrollbar]:w-3"
			x-data="{displayScrollToTopButton: false}"
			@scroll.debounce="$event.target.scrollTop > 10 ? displayScrollToTopButton = true : displayScrollToTopButton = false"
		>
			@componentSettings.MiddleContent
			<!-- SidebarScrollToTopButton -->
			{{ scrollToTopButtonClasses := "ph-bold hover:text-secondary-500 ph-arrow-square-up sticky bottom-3 cursor-pointer text-neutral-50/50" }}
			{{ scrollToTopButtonPositionClass := "right-3 float-right" }}
			if componentSettings.IsCollapsed {
				{{ scrollToTopButtonPositionClass = "block !bottom-2 text-center" }}
			}
			{{ scrollToTopButtonClasses += " " + scrollToTopButtonPositionClass }}
			<i
				class={ scrollToTopButtonClasses }
				:class={ "{ 'block text-center !bottom-2 !float-none': " + componentSettings.IsCollapsedTwoWayStatePath + "}" }
				@click="$el.parentElement.scrollTo({ top: 0, behavior: 'smooth' });"
				x-show="displayScrollToTopButton"
				x-transition
			></i>
		</div>
		<!-- SidebarFooterContent -->
		if componentSettings.FooterContent != nil {
			<div class="flex border-t border-neutral-50/5">
				@componentSettings.FooterContent
			</div>
		}
		<!-- SidebarCollapseToggleButton -->
		if componentSettings.IsCollapsedTwoWayStatePath != "" {
			{{ collapseIconClasses := "absolute top-3 ph-bold hover:text-secondary-500 cursor-pointer text-neutral-50/50" }}
			{{ collapseIconAlignmentClass := "" }}
			switch componentSettings.Side {
				case SidebarSideRight:
					{{ collapseIconAlignmentClass = "-left-2 ph-arrow-square-left" }}
				default:
					if componentSettings.SideTwoWayStatePath == "" {
						{{ collapseIconAlignmentClass = "-right-2 ph-arrow-square-right" }}
					}
			}
			{{ collapseIconClasses += " " + collapseIconAlignmentClass }}
			{{ collapseIconDynamicClasses := "{ 'rotate-180':!" + componentSettings.IsCollapsedTwoWayStatePath + "," }}
			if componentSettings.SideTwoWayStatePath != "" {
				{{ collapseIconDynamicClasses += "'-left-2 ph-arrow-square-left':" + componentSettings.SideTwoWayStatePath + " === '" + SidebarSideRight + "'," }}
				{{ collapseIconDynamicClasses += "'-right-2 ph-arrow-square-right':" + componentSettings.SideTwoWayStatePath + " === '" + SidebarSideLeft + "'" }}
			}
			{{ collapseIconDynamicClasses += "}" }}
			<i
				class={ collapseIconClasses }
				:class={ collapseIconDynamicClasses }
				@click={ componentSettings.IsCollapsedTwoWayStatePath + " = !" + componentSettings.IsCollapsedTwoWayStatePath }
			></i>
		}
	</aside>
}
