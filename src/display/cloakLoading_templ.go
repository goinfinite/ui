// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.898
package uiDisplay

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "strconv"

const (
	CloakLoadingIconSizeXs string = "2rem"
	CloakLoadingIconSizeSm string = "3rem"
	CloakLoadingIconSizeMd string = "5rem"
	CloakLoadingIconSizeLg string = "7rem"

	CloakLoadingTextSizeXs string = "0.75rem"
	CloakLoadingTextSizeSm string = "1rem"
	CloakLoadingTextSizeMd string = "1.25rem"
	CloakLoadingTextSizeLg string = "1.5rem"

	CloakLoadingAnimationNameBounce string = "bounce"
	CloakLoadingAnimationNamePing   string = "ping"
	CloakLoadingAnimationNamePulse  string = "pulse"
	CloakLoadingAnimationNameSpin   string = "spin"
)

type CloakLoadingSettings struct {
	// OptionalFields
	HideDelaySeconds             string
	BackgroundColor              string
	TextMessage                  string
	TextColor                    string
	TextSize                     string
	Icon                         string
	IconSize                     string
	IconColor                    string
	IconAnimationName            string
	IconAnimationDurationSeconds string
}

func CloakLoading(componentSettings CloakLoadingSettings) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)

		hideDelaySeconds := "1"
		if componentSettings.HideDelaySeconds != "" {
			hideDelaySeconds = componentSettings.HideDelaySeconds
		}
		hideDelayInt, err := strconv.Atoi(hideDelaySeconds)
		if err != nil {
			hideDelayInt = 1
		}
		hideDelayMilliseconds := strconv.Itoa(hideDelayInt * 1000)
		bgColor := "rgb(7, 27, 39)"
		if componentSettings.BackgroundColor != "" {
			bgColor = componentSettings.BackgroundColor
		}
		iconClass := "ph-duotone"
		iconName := "ph-compass-rose"
		if componentSettings.Icon != "" {
			iconName = componentSettings.Icon
		}
		iconClass += " " + iconName
		iconSize := "3rem"
		switch componentSettings.IconSize {
		case CloakLoadingIconSizeXs:
			iconSize = CloakLoadingIconSizeXs
		case CloakLoadingIconSizeSm:
			iconSize = CloakLoadingIconSizeSm
		case CloakLoadingIconSizeMd:
			iconSize = CloakLoadingIconSizeMd
		case CloakLoadingIconSizeLg:
			iconSize = CloakLoadingIconSizeLg
		}
		iconColor := "rgb(250, 250, 250)"
		if componentSettings.IconColor != "" {
			iconColor = componentSettings.IconColor
		}
		animationName := CloakLoadingAnimationNameSpin
		switch componentSettings.IconAnimationName {
		case CloakLoadingAnimationNameBounce:
			animationName = CloakLoadingAnimationNameBounce
		case CloakLoadingAnimationNamePing:
			animationName = CloakLoadingAnimationNamePing
		case CloakLoadingAnimationNamePulse:
			animationName = CloakLoadingAnimationNamePulse
		}
		animationDurationSeconds := "2"
		if componentSettings.IconAnimationDurationSeconds != "" {
			animationDurationSeconds = componentSettings.IconAnimationDurationSeconds
		}
		iconAnimationStyle := "animation: " + animationName + " " + animationDurationSeconds + "s"
		switch animationName {
		case CloakLoadingAnimationNameBounce:
			iconAnimationStyle += " infinite"
		case CloakLoadingAnimationNamePing:
			iconAnimationStyle += " cubic-bezier(0, 0, 0.2, 1) infinite"
		case CloakLoadingAnimationNamePulse:
			iconAnimationStyle += " cubic-bezier(0.4, 0, 0.6, 1) infinite"
		case CloakLoadingAnimationNameSpin:
			iconAnimationStyle += " linear infinite"
		}
		textMessage := "Loading..."
		if componentSettings.TextMessage != "" {
			textMessage = componentSettings.TextMessage
		}
		textSize := "1rem"
		switch componentSettings.TextSize {
		case CloakLoadingTextSizeXs:
			textSize = CloakLoadingTextSizeXs
		case CloakLoadingTextSizeSm:
			textSize = CloakLoadingTextSizeSm
		case CloakLoadingTextSizeMd:
			textSize = CloakLoadingTextSizeMd
		case CloakLoadingTextSizeLg:
			textSize = CloakLoadingTextSizeLg
		}
		textColor := "rgb(250, 250, 250)"
		if componentSettings.TextColor != "" {
			textColor = componentSettings.TextColor
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div style=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 string
		templ_7745c5c3_Var2, templ_7745c5c3_Err = templruntime.SanitizeStyleAttributeValues("display: flex; " +
			"align-items: center; " +
			"justify-content: center; " +
			"position: fixed; " +
			"top: 0; " +
			"left: 0; " +
			"width: 100%; " +
			"height: 100%; " +
			"background-color: " + bgColor + "; " +
			"z-index: 9999; " +
			"flex-direction: column; " +
			"gap: 1rem;")
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/display/cloakLoading.templ`, Line: 138, Col: 15}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "\" x-init=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var3 string
		templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs("setTimeout(() => { $el.style.display = 'none'; }, " + hideDelayMilliseconds + ");")
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/display/cloakLoading.templ`, Line: 139, Col: 94}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var4 = []any{iconClass}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var4...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "<i class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var5 string
		templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var4).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/display/cloakLoading.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "\" style=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var6 string
		templ_7745c5c3_Var6, templ_7745c5c3_Err = templruntime.SanitizeStyleAttributeValues("font-size: " + iconSize + "; " +
			"color: " + iconColor + "; " +
			iconAnimationStyle)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/display/cloakLoading.templ`, Line: 145, Col: 22}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var6))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "\"></i> ")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if textMessage != "" {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, "<span style=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var7 string
			templ_7745c5c3_Var7, templ_7745c5c3_Err = templruntime.SanitizeStyleAttributeValues("font-size: " + textSize + "; color: " + textColor + ";")
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/display/cloakLoading.templ`, Line: 148, Col: 73}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var7))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var8 string
			templ_7745c5c3_Var8, templ_7745c5c3_Err = templ.JoinStringErrs(textMessage)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/display/cloakLoading.templ`, Line: 148, Col: 89}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var8))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, "</span>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 10, "</div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
