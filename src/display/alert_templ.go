// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.898
package uiDisplay

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"github.com/goinfinite/ui/src/control"
	"strconv"
)

const (
	AlertVariationSuccess string = "success"
	AlertVariationWarning string = "warning"
	AlertVariationError   string = "error"
	AlertVariationInfo    string = "info"

	AlertSizeXs string = "xs"
	AlertSizeSm string = "sm"
	AlertSizeMd string = "md"
	AlertSizeLg string = "lg"
	AlertSizeXl string = "xl"

	AlertRingThicknessXs string = "xs"
	AlertRingThicknessSm string = "sm"
	AlertRingThicknessMd string = "md"
	AlertRingThicknessLg string = "lg"
	AlertRingThicknessXl string = "xl"

	AlertBorderRadiusNone string = "none"
	AlertBorderRadiusXs   string = "xs"
	AlertBorderRadiusSm   string = "sm"
	AlertBorderRadiusMd   string = "md"
	AlertBorderRadiusLg   string = "lg"
	AlertBorderRadiusXl   string = "xl"

	AlertShadowSizeNone string = "none"
	AlertShadowSizeXs   string = "xs"
	AlertShadowSizeSm   string = "sm"
	AlertShadowSizeMd   string = "md"
	AlertShadowSizeLg   string = "lg"
	AlertShadowSizeXl   string = "xl"
)

type AlertSettings struct {
	// OptionalFields
	ContentHtml                         templ.Component
	Title                               string
	TitleOneWayStatePath                string
	TitleLeftIcon                       string
	TitleLeftIconTwoWayStatePath        string
	TitleRightIcon                      string
	TitleRightIconTwoWayStatePath       string
	Description                         string
	DescriptionOneWayStatePath          string
	DescriptionLeftIcon                 string
	DescriptionLeftIconTwoWayStatePath  string
	DescriptionRightIcon                string
	DescriptionRightIconTwoWayStatePath string
	Variation                           string
	Size                                string
	MaxWidth                            string
	BackgroundColor                     string
	TextColor                           string
	TextTitleColor                      string
	TextDescriptionColor                string
	RingColor                           string
	RingThickness                       string
	BorderRadius                        string
	ShadowSize                          string
	IsCloseable                         bool
	IsCloseableOneWayStatePath          string
	CloseIconBackgroundColor            string
	CloseIconTextColor                  string
	OnCloseFunc                         string
	DisplayTimeoutSeconds               int
	OnTimeoutFunc                       string
}

func Alert(componentSettings AlertSettings) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		alertClasses := "flex w-full items-start gap-3 p-4"
		alertIconClasses := "ph-duotone text-xl flex-shrink-0 mt-0.5"
		alertContentClasses := "flex-1 flex flex-col gap-0.5"
		alertTitleClasses := "font-semibold"
		alertDescriptionClasses := ""
		alertCloseClasses := "ph-bold ph-x cursor-pointer flex-shrink-0 hover:opacity-75 transition-opacity"
		if componentSettings.Size == "" {
			componentSettings.Size = AlertSizeMd
		}
		switch componentSettings.Size {
		case AlertSizeXs:
			alertClasses += " text-xs"
			alertIconClasses = "ph-duotone text-sm flex-shrink-0 mt-0.5"
			alertTitleClasses += " text-xs"
			alertDescriptionClasses += " text-xs"
			alertCloseClasses += " text-xs p-0.5"
		case AlertSizeSm:
			alertClasses += " text-sm"
			alertIconClasses = "ph-duotone text-base flex-shrink-0 mt-0.5"
			alertTitleClasses += " text-sm"
			alertDescriptionClasses += " text-sm"
			alertCloseClasses += " text-sm p-1"
		case AlertSizeMd:
			alertClasses += " text-base"
			alertIconClasses = "ph-duotone text-xl flex-shrink-0 mt-0.5"
			alertTitleClasses += " text-base"
			alertDescriptionClasses += " text-base"
			alertCloseClasses += " text-base p-1"
		case AlertSizeLg:
			alertClasses += " text-lg"
			alertIconClasses = "ph-duotone text-2xl flex-shrink-0 mt-0.5"
			alertTitleClasses += " text-lg"
			alertDescriptionClasses += " text-lg"
			alertCloseClasses += " text-lg p-1.5"
		case AlertSizeXl:
			alertClasses += " text-xl"
			alertIconClasses = "ph-duotone text-3xl flex-shrink-0 mt-0.5"
			alertTitleClasses += " text-xl"
			alertDescriptionClasses += " text-xl"
			alertCloseClasses += " text-xl p-2"
		}
		maxWidthClasses := ""
		if componentSettings.MaxWidth != "" {
			maxWidthClasses = "max-w-" + componentSettings.MaxWidth
		}
		alertClasses += " " + maxWidthClasses
		alertVariationIcon := ""
		alertVariationBgColor := "bg-neutral-50/10"
		alertVariationTextColor := "text-neutral-50"
		alertVariationIconColor := "text-blue-400"
		switch componentSettings.Variation {
		case AlertVariationSuccess:
			alertVariationIcon = "ph-check-circle"
			alertVariationBgColor = "bg-emerald-500/10"
			alertVariationTextColor = "text-emerald-50"
			alertVariationIconColor = "text-emerald-400"
		case AlertVariationWarning:
			alertVariationIcon = "ph-warning"
			alertVariationBgColor = "bg-yellow-500/10"
			alertVariationTextColor = "text-yellow-50"
			alertVariationIconColor = "text-yellow-400"
		case AlertVariationError:
			alertVariationIcon = "ph-x-circle"
			alertVariationBgColor = "bg-red-500/10"
			alertVariationTextColor = "text-red-50"
			alertVariationIconColor = "text-red-400"
		case AlertVariationInfo:
			alertVariationIcon = "ph-info"
			alertVariationBgColor = "bg-blue-500/10"
			alertVariationTextColor = "text-blue-50"
			alertVariationIconColor = "text-blue-400"
		}
		backgroundColor := alertVariationBgColor
		if componentSettings.BackgroundColor != "" {
			backgroundColor = "bg-" + componentSettings.BackgroundColor
		}
		alertClasses += " " + backgroundColor
		textColor := alertVariationTextColor
		if componentSettings.TextColor != "" {
			textColor = "text-" + componentSettings.TextColor
		}
		alertClasses += " " + textColor
		ringClasses := "ring-0"
		if componentSettings.RingThickness != "" {
			switch componentSettings.RingThickness {
			case AlertRingThicknessXs:
				ringClasses = "ring-1"
			case AlertRingThicknessSm:
				ringClasses = "ring-1.5"
			case AlertRingThicknessMd:
				ringClasses = "ring-2"
			case AlertRingThicknessLg:
				ringClasses = "ring-2.5"
			case AlertRingThicknessXl:
				ringClasses = "ring-3"
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, " ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if componentSettings.RingColor != "" {
				ringClasses += " ring-" + componentSettings.RingColor
			}
		}
		alertClasses += " " + ringClasses
		borderRadius := ""
		if componentSettings.BorderRadius == "" {
			componentSettings.BorderRadius = AlertBorderRadiusMd
		}
		switch componentSettings.BorderRadius {
		case AlertBorderRadiusNone:
			borderRadius = "rounded-none"
		case AlertBorderRadiusXs:
			borderRadius = "rounded-xs"
		case AlertBorderRadiusSm:
			borderRadius = "rounded-sm"
		case AlertBorderRadiusMd:
			borderRadius = "rounded"
		case AlertBorderRadiusLg:
			borderRadius = "rounded-lg"
		case AlertBorderRadiusXl:
			borderRadius = "rounded-xl"
		}
		alertClasses += " " + borderRadius
		shadowClasses := ""
		switch componentSettings.ShadowSize {
		case AlertShadowSizeXs:
			shadowClasses = "shadow-xs"
		case AlertShadowSizeSm:
			shadowClasses = "shadow-sm"
		case AlertShadowSizeMd:
			shadowClasses = "shadow-md"
		case AlertShadowSizeLg:
			shadowClasses = "shadow-lg"
		case AlertShadowSizeXl:
			shadowClasses = "shadow-xl"
		}
		if shadowClasses != "" {
			alertClasses += " " + shadowClasses
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<!-- Alert HTML -->")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		alertAlpineState := ""
		if componentSettings.DisplayTimeoutSeconds > 0 || componentSettings.IsCloseable {
			alertAlpineState = "{ alertVisible: true }"
		}
		var templ_7745c5c3_Var2 = []any{alertClasses}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var2...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "<div class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var3 string
		templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var2).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/display/alert.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if alertAlpineState != "" {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, " x-data=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var4 string
			templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(alertAlpineState)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/display/alert.templ`, Line: 229, Col: 28}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "\" x-show=\"alertVisible\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if componentSettings.DisplayTimeoutSeconds > 0 {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, " x-init=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var5 string
				templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs("setTimeout(() => { alertVisible = false; " + componentSettings.OnTimeoutFunc + " }, " + strconv.Itoa(componentSettings.DisplayTimeoutSeconds*1000) + ")")
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/display/alert.templ`, Line: 232, Col: 166}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, " role=\"alert\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		iconClasses := alertIconClasses + " " + alertVariationIconColor
		if componentSettings.TitleLeftIcon != "" || componentSettings.TitleLeftIconTwoWayStatePath != "" {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 10, "<!-- AlertLeftIcon --> ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var6 = []any{"ph-duotone " + componentSettings.TitleLeftIcon + " " + iconClasses}
			templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var6...)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 11, "<i class=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var7 string
			templ_7745c5c3_Var7, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var6).String())
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/display/alert.templ`, Line: 1, Col: 0}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var7))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 12, "\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if componentSettings.TitleLeftIconTwoWayStatePath != "" {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 13, " :class=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var8 string
				templ_7745c5c3_Var8, templ_7745c5c3_Err = templ.JoinStringErrs("'" + componentSettings.TitleLeftIconTwoWayStatePath + "'")
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/display/alert.templ`, Line: 243, Col: 72}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var8))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 14, "\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 15, "></i>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		} else if componentSettings.Variation != "" {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 16, "<!-- AlertVariationIcon --> ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var9 = []any{alertVariationIcon + " " + iconClasses}
			templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var9...)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 17, "<i class=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var10 string
			templ_7745c5c3_Var10, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var9).String())
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/display/alert.templ`, Line: 1, Col: 0}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var10))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 18, "\"></i>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 19, "<!-- AlertContent -->")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var11 = []any{alertContentClasses}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var11...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 20, "<div class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var12 string
		templ_7745c5c3_Var12, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var11).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/display/alert.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var12))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 21, "\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if componentSettings.ContentHtml != nil {
			templ_7745c5c3_Err = componentSettings.ContentHtml.Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		} else {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 22, "<!-- AlertTitle --> ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			titleTextColor := ""
			if componentSettings.TextTitleColor != "" {
				titleTextColor = "text-" + componentSettings.TextTitleColor
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 23, " ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			titleClasses := alertTitleClasses
			if titleTextColor != "" {
				titleClasses += " " + titleTextColor
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 24, " ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if componentSettings.Title != "" || componentSettings.TitleOneWayStatePath != "" {
				var templ_7745c5c3_Var13 = []any{titleClasses}
				templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var13...)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 25, "<div class=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var14 string
				templ_7745c5c3_Var14, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var13).String())
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/display/alert.templ`, Line: 1, Col: 0}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var14))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 26, "\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				if componentSettings.TitleOneWayStatePath != "" {
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 27, " x-text=\"")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					var templ_7745c5c3_Var15 string
					templ_7745c5c3_Var15, templ_7745c5c3_Err = templ.JoinStringErrs(componentSettings.TitleOneWayStatePath)
					if templ_7745c5c3_Err != nil {
						return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/display/alert.templ`, Line: 268, Col: 54}
					}
					_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var15))
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 28, "\"")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 29, ">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templ.Raw(componentSettings.Title).Render(ctx, templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 30, "</div>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 31, " <!-- AlertDescription --> ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			descriptionTextColor := ""
			if componentSettings.TextDescriptionColor != "" {
				descriptionTextColor = "text-" + componentSettings.TextDescriptionColor
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 32, " ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			descriptionClasses := alertDescriptionClasses
			if descriptionTextColor != "" {
				descriptionClasses += " " + descriptionTextColor
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 33, " ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if componentSettings.Description != "" || componentSettings.DescriptionOneWayStatePath != "" {
				var templ_7745c5c3_Var16 = []any{descriptionClasses}
				templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var16...)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 34, "<div class=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var17 string
				templ_7745c5c3_Var17, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var16).String())
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/display/alert.templ`, Line: 1, Col: 0}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var17))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 35, "\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				if componentSettings.DescriptionOneWayStatePath != "" {
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 36, " x-text=\"")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					var templ_7745c5c3_Var18 string
					templ_7745c5c3_Var18, templ_7745c5c3_Err = templ.JoinStringErrs(componentSettings.DescriptionOneWayStatePath)
					if templ_7745c5c3_Err != nil {
						return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/display/alert.templ`, Line: 287, Col: 60}
					}
					_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var18))
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 37, "\"")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 38, ">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templ.Raw(componentSettings.Description).Render(ctx, templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 39, "</div>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 40, "</div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if componentSettings.TitleRightIcon != "" || componentSettings.TitleRightIconTwoWayStatePath != "" {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 41, "<!-- AlertRightIcon --> ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var19 = []any{"ph-duotone " + componentSettings.TitleRightIcon + " " + iconClasses}
			templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var19...)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 42, "<i class=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var20 string
			templ_7745c5c3_Var20, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var19).String())
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/display/alert.templ`, Line: 1, Col: 0}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var20))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 43, "\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if componentSettings.TitleRightIconTwoWayStatePath != "" {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 44, " :class=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var21 string
				templ_7745c5c3_Var21, templ_7745c5c3_Err = templ.JoinStringErrs("'" + componentSettings.TitleRightIconTwoWayStatePath + "'")
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/display/alert.templ`, Line: 300, Col: 73}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var21))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 45, "\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 46, "></i> ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		if componentSettings.IsCloseable || componentSettings.IsCloseableOneWayStatePath != "" {
			closeIconSize := uiControl.ButtonSizeXs
			switch componentSettings.Size {
			case AlertSizeXs:
				closeIconSize = uiControl.ButtonSizeXs
			case AlertSizeSm:
				closeIconSize = uiControl.ButtonSizeXs
			case AlertSizeMd:
				closeIconSize = uiControl.ButtonSizeSm
			case AlertSizeLg:
				closeIconSize = uiControl.ButtonSizeSm
			case AlertSizeXl:
				closeIconSize = uiControl.ButtonSizeMd
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 47, " <!-- AlertCloseButton --> ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}

			closeButtonSettings := uiControl.ButtonSettings{
				IconLeft:    "ph-x",
				OnClickFunc: "alertVisible = false; " + componentSettings.OnCloseFunc,
				Size:        closeIconSize,
				Shape:       uiControl.ButtonShapeCircular,
			}
			if componentSettings.CloseIconBackgroundColor != "" {
				closeButtonSettings.BackgroundColor = componentSettings.CloseIconBackgroundColor
			}
			if componentSettings.CloseIconTextColor != "" {
				closeButtonSettings.TextColor = componentSettings.CloseIconTextColor
			}
			if componentSettings.IsCloseableOneWayStatePath != "" {
				closeButtonSettings.IsVisibleOneWayStatePath = componentSettings.IsCloseableOneWayStatePath
			}
			templ_7745c5c3_Err = uiControl.Button(closeButtonSettings).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 48, "</div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
