// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.865
package uiDisplay

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

const (
	LoadingOverlayIconSizeXs string = "text-2xl"
	LoadingOverlayIconSizeSm string = "text-3xl"
	LoadingOverlayIconSizeMd string = "text-5xl"
	LoadingOverlayIconSizeLg string = "text-7xl"

	LoadingOverlayAnimationNameBounce string = "bounce"
	LoadingOverlayAnimationNamePing   string = "ping"
	LoadingOverlayAnimationNamePulse  string = "pulse"
	LoadingOverlayAnimationNameSpin   string = "spin"
)

type LoadingOverlaySettings struct {
	// OptionalFields
	IsLoadingOneWayStatePath string
	BackgroundColor          string
	Icon                     string
	IconSize                 string
	AnimationName            string
	AnimationDurationSeconds string
}

func LoadingOverlay(componentSettings LoadingOverlaySettings) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<!-- LoadingOverlay CSS --><style type=\"text/css\">.htmx-request #loading-overlay,.htmx-request#loading-overlay{display:flex}</style>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		loadingOverlayClasses := "z-100 fixed top-0 left-0 h-full w-full items-center justify-center"
		if componentSettings.IsLoadingOneWayStatePath != "" {
			loadingOverlayClasses += " flex"
		} else {
			loadingOverlayClasses += " hidden"
		}
		backgroundColor := "primary-500/60"
		if componentSettings.BackgroundColor != "" {
			backgroundColor = componentSettings.BackgroundColor
		}
		loadingOverlayClasses += " bg-" + backgroundColor
		loadingOverlayIconClasses := "ph-duotone"
		loadingOverlayIcon := "ph-compass-rose"
		if componentSettings.Icon != "" {
			loadingOverlayIcon = componentSettings.Icon
		}
		loadingOverlayIconClasses += " " + loadingOverlayIcon
		loadingOverlayIconSize := LoadingOverlayIconSizeMd
		switch componentSettings.IconSize {
		case LoadingOverlayIconSizeXs:
			loadingOverlayIconSize = LoadingOverlayIconSizeXs
		case LoadingOverlayIconSizeSm:
			loadingOverlayIconSize = LoadingOverlayIconSizeSm
		case LoadingOverlayIconSizeMd:
			loadingOverlayIconSize = LoadingOverlayIconSizeMd
		case LoadingOverlayIconSizeLg:
			loadingOverlayIconSize = LoadingOverlayIconSizeLg
		}
		loadingOverlayIconClasses += " " + loadingOverlayIconSize
		loadingOverlayIconAnimationName := LoadingOverlayAnimationNameSpin
		switch componentSettings.AnimationName {
		case LoadingOverlayAnimationNameBounce:
			loadingOverlayIconAnimationName = LoadingOverlayAnimationNameBounce
		case LoadingOverlayAnimationNamePing:
			loadingOverlayIconAnimationName = LoadingOverlayAnimationNamePing
		case LoadingOverlayAnimationNamePulse:
			loadingOverlayIconAnimationName = LoadingOverlayAnimationNamePulse
		case LoadingOverlayAnimationNameSpin:
			loadingOverlayIconAnimationName = LoadingOverlayAnimationNameSpin
		}
		loadingOverlayIconClasses += " animate-" + loadingOverlayIconAnimationName
		loadingOverlayIconAnimationDuration := "2"
		if componentSettings.AnimationDurationSeconds != "" {
			loadingOverlayIconAnimationDuration = componentSettings.AnimationDurationSeconds
		}
		loadingOverlayIconClasses += " animate-duration-[" + loadingOverlayIconAnimationDuration + "s]"
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<!-- LoadingOverlay HTML -->")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 = []any{loadingOverlayClasses}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var2...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "<div id=\"loading-overlay\" class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var3 string
		templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var2).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/display/loadingOverlay.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if componentSettings.IsLoadingOneWayStatePath != "" {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, " x-show=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var4 string
			templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(componentSettings.IsLoadingOneWayStatePath)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/display/loadingOverlay.templ`, Line: 79, Col: 54}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, ">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var5 = []any{loadingOverlayIconClasses}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var5...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "<i class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var6 string
		templ_7745c5c3_Var6, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var5).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/display/loadingOverlay.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var6))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, "\"></i></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
