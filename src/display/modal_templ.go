// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.894
package uiDisplay

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import uiControl "github.com/goinfinite/ui/src/control"

const (
	ModalSizeXs   string = "xs"
	ModalSizeSm   string = "sm"
	ModalSizeMd   string = "md"
	ModalSizeLg   string = "lg"
	ModalSizeXl   string = "xl"
	ModalSizeFull string = "full"

	ModalBorderRadiusNone string = "none"
	ModalBorderRadiusXs   string = "xs"
	ModalBorderRadiusSm   string = "sm"
	ModalBorderRadiusMd   string = "md"
	ModalBorderRadiusLg   string = "lg"
	ModalBorderRadiusXl   string = "xl"

	ModalShadowSizeNone string = "none"
	ModalShadowSizeXs   string = "xs"
	ModalShadowSizeSm   string = "sm"
	ModalShadowSizeMd   string = "md"
	ModalShadowSizeLg   string = "lg"
	ModalShadowSizeXl   string = "xl"

	ModalRingThicknessXs string = "xs"
	ModalRingThicknessSm string = "sm"
	ModalRingThicknessMd string = "md"
	ModalRingThicknessLg string = "lg"
	ModalRingThicknessXl string = "xl"
)

type ModalSettings struct {
	MiddleContent templ.Component

	// OptionalFields
	Title                    string
	TitleOneWayStatePath     string
	HeaderContent            templ.Component
	FooterContent            templ.Component
	Size                     string
	SizeTwoWayStatePath      string
	BackdropColor            string
	BackgroundColor          string
	TextColor                string
	BorderRadius             string
	ShadowSize               string
	RingColor                string
	RingThickness            string
	IsVisibleTwoWayStatePath string
	IsUncloseable            bool
	IsUnresizable            bool
}

func Modal(componentSettings ModalSettings) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<!-- Modal Backdrop -->")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		backdropClasses := "fixed inset-0 z-100 flex items-center justify-center"
		backdropBackgroundColor := "bg-neutral-900/75"
		if componentSettings.BackdropColor != "" {
			backdropBackgroundColor = "bg-" + componentSettings.BackdropColor
		}
		backdropClasses += " " + backdropBackgroundColor
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<!-- Modal Container Classes -->")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		modalClasses := "relative flex flex-col gap-4"
		backgroundColor := "bg-primary-900"
		if componentSettings.BackgroundColor != "" {
			backgroundColor = "bg-" + componentSettings.BackgroundColor
		}
		textColor := "text-neutral-50"
		if componentSettings.TextColor != "" {
			textColor = "text-" + componentSettings.TextColor
		}
		modalClasses += " " + backgroundColor + " " + textColor
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "<!-- Modal Size -->")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}

		modalSizeClassesXs := "w-full max-w-md p-3"
		modalSizeClassesSm := "w-full max-w-lg p-3.5"
		modalSizeClassesMd := "w-full max-w-xl p-4"
		modalSizeClassesLg := "w-full max-w-2xl p-4.5"
		modalSizeClassesXl := "w-full max-w-3xl p-5"
		modalSizeClassesFull := "w-full h-full p-5.5"
		modalSizeClasses := modalSizeClassesMd
		modalStandardHeaderTitleSize := "text-lg"
		modalStandardHeaderIconSize := uiControl.ButtonSizeSm
		if componentSettings.Size == "" {
			componentSettings.Size = ModalSizeMd
		}
		switch componentSettings.Size {
		case ModalSizeXs:
			modalSizeClasses = modalSizeClassesXs
		case ModalSizeSm:
			modalSizeClasses = modalSizeClassesSm
		case ModalSizeMd:
			modalSizeClasses = modalSizeClassesMd
		case ModalSizeLg:
			modalSizeClasses = modalSizeClassesLg
			modalStandardHeaderTitleSize = "text-xl"
			modalStandardHeaderIconSize = uiControl.ButtonSizeMd
		case ModalSizeXl:
			modalSizeClasses = modalSizeClassesXl
			modalStandardHeaderTitleSize = "text-2xl"
			modalStandardHeaderIconSize = uiControl.ButtonSizeMd
		case ModalSizeFull:
			modalSizeClasses = modalSizeClassesFull
			modalStandardHeaderTitleSize = "text-3xl"
			modalStandardHeaderIconSize = uiControl.ButtonSizeMd
		}
		modalClasses += " " + modalSizeClasses
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "<!-- Modal Border Radius -->")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		borderRadiusClasses := "rounded"
		switch componentSettings.BorderRadius {
		case ModalBorderRadiusNone:
			borderRadiusClasses = "rounded-none"
		case ModalBorderRadiusXs:
			borderRadiusClasses = "rounded-xs"
		case ModalBorderRadiusSm:
			borderRadiusClasses = "rounded-sm"
		case ModalBorderRadiusMd:
			borderRadiusClasses = "rounded"
		case ModalBorderRadiusLg:
			borderRadiusClasses = "rounded-lg"
		case ModalBorderRadiusXl:
			borderRadiusClasses = "rounded-xl"
		default:
			borderRadiusClasses = "rounded"
		}
		modalClasses += " " + borderRadiusClasses
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "<!-- Modal Shadow -->")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		shadowClasses := "shadow-md"
		switch componentSettings.ShadowSize {
		case ModalShadowSizeNone:
			shadowClasses = "shadow-none"
		case ModalShadowSizeXs:
			shadowClasses = "shadow-xs"
		case ModalShadowSizeSm:
			shadowClasses = "shadow-sm"
		case ModalShadowSizeMd:
			shadowClasses = "shadow-md"
		case ModalShadowSizeLg:
			shadowClasses = "shadow-lg"
		case ModalShadowSizeXl:
			shadowClasses = "shadow-xl"
		default:
			shadowClasses = "shadow-md"
		}
		modalClasses += " " + shadowClasses
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "<!-- Modal Ring -->")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		ringClasses := ""
		if componentSettings.RingColor != "" && componentSettings.RingThickness != "" {
			ringThickness := "ring-1"
			switch componentSettings.RingThickness {
			case ModalRingThicknessXs:
				ringThickness = "ring-1"
			case ModalRingThicknessSm:
				ringThickness = "ring-1.5"
			case ModalRingThicknessMd:
				ringThickness = "ring-2"
			case ModalRingThicknessLg:
				ringThickness = "ring-2.5"
			case ModalRingThicknessXl:
				ringThickness = "ring-3"
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, " ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			ringClasses = ringThickness + " ring-" + componentSettings.RingColor
		}
		modalClasses += " " + ringClasses
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "<!-- Modal HTML -->")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 = []any{backdropClasses}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var2...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, "<div class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var3 string
		templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var2).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/display/modal.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 10, "\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if componentSettings.IsVisibleTwoWayStatePath != "" {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 11, " x-show=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var4 string
			templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(componentSettings.IsVisibleTwoWayStatePath)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/display/modal.templ`, Line: 178, Col: 54}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 12, "\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 13, " x-transition x-cloak un-cloak")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if componentSettings.IsVisibleTwoWayStatePath != "" {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 14, " @click.self=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var5 string
			templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(componentSettings.IsVisibleTwoWayStatePath + " = false")
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/display/modal.templ`, Line: 184, Col: 72}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 15, "\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 16, ">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		modalInternalState := ""
		if componentSettings.SizeTwoWayStatePath != "" {
			modalInternalState = "{ defaultModalSize: structuredClone(" + componentSettings.SizeTwoWayStatePath + ") }"
		}
		if componentSettings.SizeTwoWayStatePath == "" && !componentSettings.IsUnresizable {

			modalInternalState = "{ modalSize: '" + componentSettings.Size + "', defaultModalSize: '" + componentSettings.Size + "' }"
			componentSettings.SizeTwoWayStatePath = "modalSize"
		}
		var templ_7745c5c3_Var6 = []any{modalClasses}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var6...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 17, "<div")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if modalInternalState != "" {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 18, " x-data=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var7 string
			templ_7745c5c3_Var7, templ_7745c5c3_Err = templ.JoinStringErrs(modalInternalState)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/display/modal.templ`, Line: 199, Col: 31}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var7))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 19, "\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 20, " class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var8 string
		templ_7745c5c3_Var8, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var6).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/display/modal.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var8))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 21, "\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if componentSettings.SizeTwoWayStatePath != "" {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 22, " :class=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var9 string
			templ_7745c5c3_Var9, templ_7745c5c3_Err = templ.JoinStringErrs(`{ '` + modalSizeClassesXs + `': ` + componentSettings.SizeTwoWayStatePath + ` === 'xs', '` + modalSizeClassesSm + `': ` + componentSettings.SizeTwoWayStatePath + ` === 'sm', '` + modalSizeClassesMd + `': ` + componentSettings.SizeTwoWayStatePath + ` === 'md', '` + modalSizeClassesLg + `': ` + componentSettings.SizeTwoWayStatePath + ` === 'lg', '` + modalSizeClassesXl + `': ` + componentSettings.SizeTwoWayStatePath + ` === 'xl', '` + modalSizeClassesFull + `': ` + componentSettings.SizeTwoWayStatePath + ` === 'full' }`)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/display/modal.templ`, Line: 203, Col: 537}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var9))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 23, "\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 24, ">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if componentSettings.HeaderContent != nil {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 25, "<!-- ModalCustomHeader --> ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = componentSettings.HeaderContent.Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		wasTitleSet := componentSettings.Title != "" || componentSettings.TitleOneWayStatePath != ""
		if componentSettings.HeaderContent == nil && wasTitleSet {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 26, "<!-- ModalStandardHeader --> <div class=\"flex items-center justify-between border-b border-neutral-50/10 pb-2.5\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var10 = []any{modalStandardHeaderTitleSize + " font-bold"}
			templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var10...)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 27, "<h2 class=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var11 string
			templ_7745c5c3_Var11, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var10).String())
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/display/modal.templ`, Line: 1, Col: 0}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var11))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 28, "\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if componentSettings.TitleOneWayStatePath != "" {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 29, " x-text=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var12 string
				templ_7745c5c3_Var12, templ_7745c5c3_Err = templ.JoinStringErrs(componentSettings.TitleOneWayStatePath)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/display/modal.templ`, Line: 217, Col: 54}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var12))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 30, "\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 31, ">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var13 string
			templ_7745c5c3_Var13, templ_7745c5c3_Err = templ.JoinStringErrs(componentSettings.Title)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/display/modal.templ`, Line: 220, Col: 31}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var13))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 32, "</h2><div class=\"flex items-center gap-1\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if componentSettings.SizeTwoWayStatePath != "" {
				templ_7745c5c3_Err = uiControl.Button(uiControl.ButtonSettings{
					IconLeftOneWayStatePath: componentSettings.SizeTwoWayStatePath + " === 'full' ? 'ph-arrows-in' : 'ph-arrows-out'",
					OnClickFunc:             componentSettings.SizeTwoWayStatePath + " = " + componentSettings.SizeTwoWayStatePath + " === 'xs' ? 'sm' : " + componentSettings.SizeTwoWayStatePath + " === 'sm' ? 'md' : " + componentSettings.SizeTwoWayStatePath + " === 'md' ? 'lg' : " + componentSettings.SizeTwoWayStatePath + " === 'lg' ? 'xl' : " + componentSettings.SizeTwoWayStatePath + " === 'xl' ? 'full' : defaultModalSize",
					Size:                    modalStandardHeaderIconSize,
					Shape:                   uiControl.ButtonShapeCircular,
				}).Render(ctx, templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			if componentSettings.IsVisibleTwoWayStatePath != "" && !componentSettings.IsUncloseable {
				templ_7745c5c3_Err = uiControl.Button(uiControl.ButtonSettings{
					IconLeft:    "ph-x",
					OnClickFunc: componentSettings.IsVisibleTwoWayStatePath + " = false",
					Size:        modalStandardHeaderIconSize,
					Shape:       uiControl.ButtonShapeCircular,
				}).Render(ctx, templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 33, "</div></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 34, "<!-- ModalMiddleContent --><div class=\"flex-1 overflow-y-auto\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = componentSettings.MiddleContent.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 35, "</div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if componentSettings.FooterContent != nil {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 36, "<!-- ModalCustomFooter --> ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = componentSettings.FooterContent.Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 37, "</div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
